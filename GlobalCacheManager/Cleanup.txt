

一开始没有处理 LogicServer 连接断开时清理GlobalCacheManager的状态。
如果连接断开，简单看作 LogicServer 已经失效，让后续的Acquire请求可以成功。
LogicServer 发现发现连接断开，退出程序（非常野蛮）。

但即使是这样处理，仍然存在问题。即：连接断开导致 LogicServer 完全退出之间有时间窗口，
LogicServer 可能仍然继续处理了一些事务，它根据本地的State，使得修改成功了。
而GlobalCacheManager在连接断开时把它看成失效。

睡了一觉，都梦到了，但是仍然没有想到简单的方法。整理一下思路。

增加一条 NormalClose Rpc，在 LogicServer 正常关闭的时候发送给 GlobalCacheManager。
GlobalCacheManager 收到协议清理该 LogicServer 的所有记录状态。此外如果发现网络丢失，所有相关Acquire失败。

GlobalAgent 是 GlobalCacheManager 的客户端，包含在 LogicServer 内。

Shutdown 本地简单规则：
	关闭时，禁止新的存储过程，和丢弃没有在执行的任务。正在执行的，等待执行完成。
	see Zeze.Application.Stop, c# 线程池应该可以Shutdown吧。这些细节暂时先不管。

GlobalAgent:Close()
	Closed = true; // 之后所有 Acquire 请求都不再发送，也不重新建立连接，马上失败。
	NormalClose.SendAndWait();
	Socket.Close();

GlobalCacheManager.ProcessNormalClose()
	Release 所有该 LogicServer 分配的记录。需要在Session中维护分配的记录。

GlobalCacheManager.OnAcquire
	if (LogicServer.Reduce.NetNotExistOrError())
		return false; // 不再看作成功。XXX 看后面。

GlobalAgent::OnSocketClose_Passive()
	Closed = true; // 之后所有 Acquire 请求都不再发送，也不重新建立连接，马上失败。
	Cleanup local record in this GlobalCacheManager。遍历尝试实现。
	Checkpoint.RunOnce(); // 清理完成后保存一次。
	Closed = false; // 重新允许继续重连发送新请求。

这样处理的话，有没有”正确性“问题呢。还有没有时间窗口。
当然，重连的话，GlobalCacheManager 还需要识别和处理。方法是连接建立成功发送
LogicServer.ServerId。现在框架里面存在的Id就是AutoKeyLocalId。

如果没有时间问题了。再处理最后一个问题：如果 LogicServer 一直没起来，
那么所有原来分配到它的记录都无法被别人申请。
这个问题暂时想到的方法是超时，比如5分钟。过后，NetNotExist看作成功。
这里超时的意义是让GlobalAgent::OnSocketClose_Passive()能完成工作。
如果 LogicServer 已经异常退出，那么它的本地状态当然都是失效的。

===================================================================
# 这里 TIMEOUT 不管怎么设置都是有风险的。
# 这里关键的问题是要确认发生了什么情况导致连接丢失。
# 采用下面更复杂的规则来处理。
===================================================================
# 1 LogicServer 退出了，但是操作系统网络是正常的：此时采用daemon工具启动 LogicServer，发现退出，起一个新的。
# 2 其他情况：需要“人工确认（管理员）” + 延时执行。
#   人工确认：就是GlobalCacheManager给管理员发消息（短信什么的），让管理员去确认 LogicServer 的情况。
#             管理员发现 LogicServer 确实不行了，短时间也无法恢复，那么通过 GlobalCacheManager 的控制台执行Cleanup命令。
#             为了防止人为的错误，管理执行Cleanup需要SecureKey。
#             进一步防止人为的错误，SecureKey可以由多人（比如两个）分别掌握一部分。
#             如果管理员都判断不出来LogicServer的运行状况。可靠的处理方式是：【关机重启，然后去执行GlobalCacheManager.Cleanup。】
#             XXX 人工参与可能带来人为问题，所以可能的话应该提供更多技术上的手段，用来检测 LogicServer 的死活。
#             XXX 比如：定时向 LogicServer 发送一个请求，启动一个事务，如果超时，就认为失败。
#             XXX 再提供一个可靠的自动的“关机”的能力。这要求提供除了ip网络外其他通讯手段。
#             XXX 【宁可服务不可用，也不能损坏数据】
#
#   延时执行：如果 LogicServer 在正常运行，只是网络断了，延时可以让 OnSocketClose_Passive 做完清理。
#             LogicServer 正常的时候，这个时间不会太长。这是为了防止人为出错的一个手段。
#             这种情况也是最容易出问题的。其他 LogicServer 的失败多数都是不能再工作了，也不容易造成数据损坏。
#
===================================================================
# 【实现方案】
# 上面已经说过的处理流程就不再说了。
# 1 GlobalCacheManager.OnLogin(LogicServerId)
#       FindSession(LogicServerId)?.Cleanup(); // set to Invalid.
# 2 GlobalCacheManager.OnReLogin(LogicServerId)
#       Bind Current Socket Session;
# 3 GlobalCacheManager.Cleanup(LogicServerId, SecureKey)
#       Verify(SecureKey);
#       DelayRun(FindSession(LogicServerId)?.Cleanup());
# 4 GlobalAgent:OnSocketConnect()
#        if (firstTime)
#             Login().Send();
#        else
#             ReLogin().Send();
#
#
# 更多实现细节看实现代码。计划修改的相关文件：
# zeze\Zeze\Services\GlobalCacheManager.cs
# zeze\Zeze\Transaction\GlobalAgent.cs
