<?xml version="1.0" encoding="utf-8"?>

<solution name="Zezex" ModuleIdAllowRanges="10000-11000">

	<module name="Linkd" id="10000">
		<bean name="BAuth">
			<variable id="1" name="Account" type="string"/>
			<variable id="2" name="Token" type="string"/> security. maybe password
		</bean>

		<rpc name="Auth" argument="BAuth" handle="server">
			<enum name="Success" value="0"/>
			<enum name="Error"   value="1"/>
		</rpc>

		<bean name="BReportError">
			<enum name="FromLink"     value="0"/>
			<enum name="FromProvider" value="1"/>

			<enum name="CodeNotAuthed"  value="1"/>
			<enum name="CodeNoProvider" value="2"/>

			<variable id="1" name="from" type="int"/>
			<variable id="2" name="code" type="int"/>
			<variable id="3" name="desc" type="string"/>
		</bean>

		<protocol name="ReportError" argument="BReportError" handle="client"/>

		<bean name="BKeepAlive">
			<variable id="1" name="timestamp" type="long"/> 客户端发上来，服务器原样放回。
		</bean>

		<protocol name="KeepAlive" argument="BKeepAlive" handle="server,client"/>

	</module>

	<module name="Provider" id="10001">
		<!-- gs to link -->
		<bean name="BModule">
			<enum name="ChoiceTypeDefault"    value="0"/>
			<enum name="ChoiceTypeHashAccount" value="1"/>
			<enum name="ChoiceTypeHashRoleId" value="2"/>

			<variable name="ChoiceType" id="1" type="int"/>

			<enum name="ConfigTypeDefault" value="0"/>
			<enum name="ConfigTypeSpecial" value="1"/>
			<enum name="ConfigTypeDynamic" value="2"/>

			<variable name="ConfigType" id="2" type="int"/>
		</bean>

		<bean name="BBind">
			<variable name="modules" id="1" type="map" key="int" value="BModule"/> moduleId -> type
			<!--
			模式一，静态绑定，用于启用cache同步的多个gs（gameserver）。
			此时 lindSids 为空。同一个moduleId可以绑定多个内部服务。客户端第一次访问时，随便选择一个内部服务，以后都用这个。
			模式二，动态绑定，用于地图服务器，玩家只能在一个地图服务器上，进入退出地图时绑定。
			lindSids 指定临时绑定该客户端连接到此服务。这个功能可能不需要，保留。
			*** 同一个moduleId不能既是静态绑定又是动态绑定。
			-->
			<variable name="linkSids" id="2" type="set" value="long"/>

			<enum name="ResultSuccess" value="0"/>
			<enum name="ResultFaild"   value="1"/>
		</bean>

		<rpc name="Bind"   argument="BBind" handle="client"/>
		<rpc name="UnBind" argument="BBind" handle="client"/>

		<bean name="BKick">
			<enum name="ErrorProtocolUnkown"    value="1"/>
			<enum name="ErrorDecode"            value="2"/>
			<enum name="ErrorProtocolException" value="3"/>

			<variable name="linksid" id="1" type="long"/>
			<variable name="code"    id="2" type="int"/>
			<variable name="desc"    id="3" type="string"/> // for debug
		</bean>

		<protocol name="Kick" argument="BKick" handle="client"/>

		<bean name="BSend">
			<variable name="linkSids"     id="1" type="set" value="long"/>
			<variable name="protocolType" id="2" type="int"/>
			<variable name="protocolWholeData" id="3" type="binary"/> 完整的协议打包，包括了 type, size
			<variable name="ConfirmSerialId" id="4" type="long"/> 不为0的时候，linkd发送SendConfirm回逻辑服务器
		</bean>

		<bean name="BSendConfirm">
			<variable name="ConfirmSerialId" id="1" type="long"/> SendConfirm 参数，即Send.Argument.ConfirmSerialId
			<variable name="LinkName" id="2" type="string"/>
		</bean>

		<protocol name="Send" argument="BSend" handle="client"/>
		<protocol name="SendConfirm" argument="BSendConfirm" handle="server"/>

		<bean name="BBroadcast">
			<variable name="protocolType" id="1" type="int"/>
			<variable name="protocolWholeData" id="2" type="binary"/> 完整的协议打包，包括了 type, size
			<variable name="time"         id="3" type="int"/>
			<variable name="ConfirmSerialId" id="4" type="long"/> 不为0的时候，linkd发送SendConfirm回逻辑服务器
		</bean>

		<protocol name="Broadcast" argument="BBroadcast" handle="client"/>

		<bean name="BSetUserState">
			<variable name="linkSid" id="1" type="long"/>
			<variable name="states"  id="2" type="list" value="long"/>
			<variable name="statex"  id="3" type="binary"/>
		</bean>

		<protocol name="SetUserState" argument="BSetUserState" handle="client"/>

		<bean name="BLoad">
			<variable name="Online"           id="1" type="int"/> 用户数量
			<variable name="ProposeMaxOnline" id="2" type="int"/> 建议最大用户数量
			<variable name="OnlineNew"        id="3" type="int"/> 最近上线用户数量，一般是一秒内的。用来防止短时间内给同一个gs分配太多用户。
		</bean>
		<!--
		gs 定时向所有的 linkd 报告负载。
		如果启用cahce-sync，可能linkd数量比较多。所以正常情况下，报告间隔应长点。比如10秒。
		1）一般gs实现：
		long LoginCount;
		long LogoutCount;

		long LoginCountLast;
		int  ReportDelaySeconds;
		int  TimoutDelaySeconds;

		void StartTimerTask(int delaySeconds = 1)
		{
			TimoutDelaySeconds = delaySeconds;
			Zeze.Util.Scheduler.Instance.Schedule(OnTimerTask, TimoutDelaySeconds * 1000);
		}

		void OnTimerTask()
		{
			int onlineNew = LoginCount - LoginCountLast;
			LoginCountLast = LoginCount;
			int onlineNewPerSecond = onlineNew / TimoutDelaySeconds;
			if (onlineNewPerSecond > Config.MaxOnlineNew)
			{
				// 最近上线太多，马上报告负载。linkd不会再分配用户过来。
				ReportLoadToAllLinkd;
				StartTimerTask(onlineNewPerSecond / Config.MaxOnlineNew + 1); // new delay for digestion
				ReportDelaySeconds = Config.ReportDelaySeconds; // 消化完后，下一次强迫报告Load。
				return;
			}
			// slow report
			ReportDelaySeconds += TimoutDelaySeconds;
			if (ReportDelaySeconds >= Config.ReportDelaySeconds)
			{
				ReportDelaySeconds = 0;
				ReportLoadToAllLinkd;
			}
			StartTimerTask();
		}
		Timer: 因为随时调整Timer的时间，所以这里使用 Zeze.Util.Scheduler。当然也可以使用系统的Timer。

		2）一般linkd实现：
		linkd在负载均衡选择gs时，会忽略掉 (Online > ProposeMaxOnline || OnlineNew > ConfigMaxOnlineNew)的gs。
		详细实现参见 linkd/Zezex.Provider.ModuleProvider.Providers
		-->
		<protocol name="ReportLoad" argument="BLoad" handle="client"/>

		<!-- link to gs -->
		<bean name="BDispatch">
			<variable name="linkSid"      id="1" type="long"/>
			<variable name="account"       id="2" type="string"/>
			<variable name="protocolType" id="3" type="int"/>
			<variable name="protocolData" id="4" type="binary"/> 协议打包，不包括 type, size
			<variable name="states"       id="5" type="list" value="long"/> SetUserState
			<variable name="statex"       id="6" type="binary"/> SetUserState
		</bean>
		<protocol name="Dispatch" argument="BDispatch" handle="server"/>

		<bean name="BLinkBroken">
			<enum name="REASON_PEERCLOSE" value="0"/>

			<variable name="account"  id="1" type="string"/>
			<variable name="linkSid" id="2" type="long"/>
			<variable name="reason"  id="3" type="int"/>

			<variable name="states"  id="5" type="list" value="long"/> SetUserState
			<variable name="statex"  id="6" type="binary"/> SetUserState
		</bean>

		<protocol name="LinkBroken" argument="BLinkBroken" handle="server"/>

		<bean name="BAnnounceLinkInfo">
			<variable name="LinkId" id="1" type="int"/> reserve
			<variable name="ProviderSessionId" id="2" type="long"/>
		</bean>
		<protocol name="AnnounceLinkInfo" NoProcedure="true" argument="BAnnounceLinkInfo" handle="server"/>

		<!-- gs to link -->
		<bean name="BAnnounceProviderInfo">
			<variable name="ServiceNamePrefix" id="1" type="string"/>
			<variable name="ServiceIndentity"  id="2" type="string"/>
		</bean>

		<protocol name="AnnounceProviderInfo" NoProcedure="true" argument="BAnnounceProviderInfo" handle="client"/>

		<!-- both: link, gs -->

		<bean name="BModuleRedirectArgument">
			<variable name="ModuleId"   id="1" type="int"/>
			<variable name="HashCode"   id="2" type="int"/> server 计算。see BBind.ChoiceType。

			<variable name="MethodFullName" id="4" type="string"/> format="ModuleFullName:MethodName"
			<variable name="Params"         id="5" type="binary"/>

			<variable name="ServiceNamePrefix" id="6" type="string"/>
		</bean>

		<bean name="BModuleRedirectResult">
			<variable name="ModuleId"       id="1" type="int"/>
			<variable name="ServerId" id="2" type="int"/> 目标server的id。
			<!-- 上面两个参数用来调试，不是必要的。 -->

			<!--
			rpc.ResultCode == ResultCodeSuccess 时，才使用下面两个变量，此时表示rpc调用流程正确了。
			处理结果是否正确，还需要进一步查看 ReturnCode。
			-->
			<variable name="ReturnCode" id="4" type="int"/> 实现函数的返回。
			<variable name="Params"     id="5" type="binary"/>
			<variable name="Actions"    id="6" type="list" value="BActionParam"/> 按回调顺序。！不是定义顺序！
		</bean>

		<bean name="BActionParam">
			<variable name="Name"   id="1" type="string"/>
			<variable name="Params" id="2" type="binary"/>
		</bean>

		<!-- 转发只定义一个rpc，以后可能需要实现server之间的直连，不再通过转发 -->
		<rpc name="ModuleRedirect" argument="BModuleRedirectArgument" result="BModuleRedirectResult" handle="server,client">
			<enum name="ResultCodeSuccess" value="0"/>
			<enum name="ResultCodeMethodFullNameNotFound" value="1"/>
			<enum name="ResultCodeHandleException" value="2"/>
			<enum name="ResultCodeHandleError" value="3"/>

			<enum name="ResultCodeLinkdTimeout"    value="10"/>
			<enum name="ResultCodeLinkdNoProvider" value="11"/>
			<enum name="ResultCodeRequestTimeout"  value="12"/>
		</rpc>

		<bean name="BModuleRedirectAllRequest">
			<variable name="ModuleId"                id="1" type="int"/>
			<variable name="HashCodeConcurrentLevel" id="2" type="int"/> 总的并发分组数量
			<variable name="HashCodes"               id="3" type="set" value="int"/> 发送给具体进程时需要处理的分组hash-index（目前由linkd填写）
			<variable name="SourceProvider"          id="4" type="long"/> linkd 转发的时候填写本地provider的sessionId。
			<variable name="SessionId"               id="5" type="long"/> 发起请求者初始化，返回结果时带回。

			<variable name="MethodFullName"          id="6" type="string"/> format="ModuleFullName:MethodName"
			<variable name="Params"                  id="7" type="binary"/>

			<variable name="ServiceNamePrefix"       id="8" type="string"/>
		</bean>

		<bean name="BModuleRedirectAllHash">
			<variable name="ReturnCode" id="4" type="int"/> 实现函数的返回。
			<variable name="Params"     id="5" type="binary"/> 目前不支持out|ref，这个先保留。
			<variable name="Actions"    id="6" type="list" value="BActionParam"/> 按回调顺序。！不是定义顺序！
		</bean>

		<bean name="BModuleRedirectAllResult">
			<variable name="ModuleId"       id="1" type="int"/>
			<variable name="ServerId" id="2" type="int"/> 目标server的id。
			<!-- 上面两个参数用来调试，不是必要的。 -->
			<variable name="SourceProvider" id="3" type="long"/> 从BModuleRedirectAllRequest里面得到。
			<variable name="MethodFullName" id="4" type="string"/> format="ModuleFullName:MethodName"
			<variable name="SessionId"      id="5" type="long"/> 发起请求者初始化，返回结果时带回。
			<!--
			ResultCode == ResultCodeSuccess 时，才使用下面变量的Value，此时表示调用流程正确了。
			处理结果是否正确，还需要进一步查看Value.ReturnCode。
			-->
			<variable name="Hashs"          id="6" type="map" key="int" value="BModuleRedirectAllHash"/> 发送给具体进程时需要处理的分组hash-index（目前由linkd填写）
		</bean>

		<!-- 使用protocol而不是rpc，是为了可以按分组返回结果，当然现在定义支持一个结果里面包含多个分组结果 -->
		<protocol name="ModuleRedirectAllRequest" argument="BModuleRedirectAllRequest" handle="server,client"/> handle在转发时需要client
		<protocol name="ModuleRedirectAllResult" argument="BModuleRedirectAllResult" handle="server,client"/> handle在转发时需要client

		<bean name="BTransmitContext">
			<variable name="LinkSid"           id="1" type="long"/>
			<variable name="ProviderId"        id="2" type="int"/>
			<variable name="ProviderSessionId" id="3" type="long"/>
		</bean>

		<bean name="BTransmit">
			<variable name="ActionName" id="1" type="string"/>
			<variable name="Roles"      id="2" type="map" key="long" value="BTransmitContext"/> 查询目标角色。
			<variable name="Sender"     id="3" type="long"/> 结果发送给Sender。

			<variable name="ServiceNamePrefix" id="4" type="string"/>
		</bean>

		<protocol name="Transmit" argument="BTransmit" NoProcedure="true" handle="server,client"/> 默认不启用事务，由协议实现自己控制。
	</module>

	<project name="linkd" gendir="." platform="cs">
		<service name="LinkdService" handle="server" base="Zeze.Services.HandshakeServer">
			<module ref="Linkd"/>
		</service>

		<service name="ProviderService" handle="client"  base="Zeze.Services.HandshakeServer">
			<module ref="Provider"/>
		</service>
	</project>

</solution>
