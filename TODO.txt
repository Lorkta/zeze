
#### TODO

Zeze
	打包和更新工具
	async await?
	GlobalTaskOneByOneByKey？？？
	AsyncSocket.Connect Timeout 可配置，不是很有必要，外面需要同步等待时，可以设置自己的等待时间，不需要依赖Socket.Timeout。
	lua beankey 问题。

Zezex
	client: 可靠消息实现的错误检查。
	Bag里面的Money移走。

ConfigEditor
	自动完成: Foreign
	自动完成：id Load 的时候记录 maxid，以后编辑AddRow都使用这个递增。
	更多自动完成？普通的列默认最近使用的n个值，根据输入在列中查找最匹配的。
	增加一个工作线程，所有数据操作都放到这里面，和UI线程交互。看情况再决定做不做。
	enum 现在不支持引用在其他文档定义的，有需要了再来加。

GlobalCacheManagerWithRaft
	优化。改成一次AppendLog。
	关键：CacheState.AcquireStatePending 仅在Leader上使用，不需要同步到Follower。

DatabaseRocksDb
	OperatesRocksDb
	atomic flush
DatabaseTikv
	OperatesTikv

Raft.Agent
	重发现在在收到LeaderIs时马上重新发送。改成延迟？
	Agent的请求lost context，但是Task.Wait怎么返回的。

war？
	一个module集合。
	定义export？private？
	App.Instance？生成代码使用基类，不再使用具体类型，实际上就是把具体类型的功能尽量放到基类。
	感觉没必要：应用使用独立进程更加安全灵活些。

Connector.WaitReady
	GlobalAgent 重构？

Raft
	增加ConcurrentMapOnRocksDb
GlobalCacheManagerWithRaft
	改成ConcurrentMapOnRocksDb

ServiceManager.Test
	注册发现重复。测试案例的问题?

                            // 【BUG】当记录删除时需要同步删除 OldTable，否则下一次又会从 OldTable 中找到。
                            if (null == r.Value && null != OldTable)

RocksDb hot-copy 这样写？

// maindb
DB* maindb;
DB::Open(options, "/maindb", &db);

// bacup
BackupEngine* backup_engine;
BackupEngine::Open(Env::Default(), BackupableDBOptions("/backupdir"), &backup_engine);
backup_engine->CreateNewBackup(maindb);
delete backup_engine;
delete checkpointdb;

#include"rocksdb/db.h"
#include"rocksdb/utilities/backupable_db.h" 
#include<vector>
using namespace rocksdb;
int main()
{ 
	Options options; 
	options.create_if_missing = true; 
	DB* db; 
	Status s = DB::Open(options, "/tmp/rocksdb", &db); 
	assert(s.ok()); 
	db->Put(...); // do your thing 
	BackupEngine* backup_engine; 
	s = BackupEngine::Open(Env::Default(), BackupableDBOptions("/tmp/rocksdb_backup"), &backup_engine); 
	assert(s.ok()); 
	s = backup_engine->CreateNewBackup(db); 
	assert(s.ok()); 
	db->Put(...); // make some more changes 
	s = backup_engine->CreateNewBackup(db); 
	assert(s.ok()); 
	std::vector<BackupInfo> backup_info; 
	backup_engine->GetBackupInfo(&backup_info); // you can get IDs from backup_info if there are more than two 
	s = backup_engine->VerifyBackup(1); 
	assert(s.ok()); 
	s = backup_engine->VerifyBackup(2); 
	assert(s.ok()); 
	delete db; 
	delete backup_engine; 
}

#include"rocksdb/db.h" 
#include"rocksdb/utilities/backupable_db.h"
using namespace rocksdb;
int main() 
{ 
	BackupEngineReadOnly* backup_engine; 
	Status s = BackupEngineReadOnly::Open(Env::Default(), BackupableDBOptions("/tmp/rocksdb_backup"), &backup_engine); 
	assert(s.ok()); 
	s = backup_engine->RestoreDBFromBackup(1, "/tmp/rocksdb", "/tmp/rocksdb"); // RestoreDBFromLatestBackup
	assert(s.ok()); 
	delete backup_engine; 
}

ConcurrentMap 并发
	1. lock(value)
	2. duplicate key

zzuser
	BDepartmentTreeNode 分块存储

Socket async surpport
	用来给纯转发服务器用，可以避免使用多线程。

NPinyin C# 删除无用的函数
