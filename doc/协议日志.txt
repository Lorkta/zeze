协议日志通过加JVM参数来开启,如: -DprotocolLog=DEBUG
可通过加JVM参数来排除不需要输出日志的协议类型(TypeId),如: -DprotocolLogExcept=3504939016,42955910777365
以上参考Zeze.Net.AsyncSocket的定义

以下是所有协议日志的格式:

通过Zeze.Net.AsyncSocket.Send(Protocol)直接发协议:
SEND:连接sessionId RPC类名:RPC的sessionId 请求Bean内容 // 发送RPC请求
SEND:连接sessionId RPC类名:RPC的sessionId>resultCode 回复Bean内容 // 发送RPC回复
SEND:连接sessionId 协议类名 协议Bean内容 // 发送协议
SEND:连接sessionId 协议类名>resultCode 协议Bean内容 // 发送带resultCode的协议

通过Zeze.Net.Protocol.decode接收协议:
RECV:连接sessionId RPC类名:RPC的sessionId 请求Bean内容 // 发送RPC请求
RECV:连接sessionId RPC类名:RPC的sessionId>resultCode 回复Bean内容 // 发送RPC回复
RECV:连接sessionId 协议类名 协议Bean内容 // 发送协议
RECV:连接sessionId 协议类名>resultCode 协议Bean内容 // 发送带resultCode的协议
如果"协议类名/RPC类名"未知,会用"moduleId:protocolId"代替,同时Bean内容会用"header[bean大小]"代替

link通过Zeze.Arch.LinkdProvider.ProcessSendRequest处理gs发来的Send协议并转发里面的协议给客户端:
Send:连接sessionId RPC类名:RPC的sessionId 请求Bean内容 // 发送RPC请求
Send:连接sessionId RPC类名:RPC的sessionId>resultCode 回复Bean内容 // 发送RPC回复
Send:连接sessionId 协议类名 协议Bean内容 // 发送协议
Send:连接sessionId 协议类名>resultCode 协议Bean内容 // 发送带resultCode的协议
多组"连接sessionId"会以"sessionId,sessionId,..."方式输出,多于10个sessionId会以"[sessionId数量]"方式输出

link通过Zeze.Arch.LinkdProvider.ProcessBroadcast处理gs发来的Broadcast协议并广播里面的协议给客户端:
Send[客户端连接数] RPC类名:RPC的sessionId 请求Bean内容 // 发送RPC请求
Send[客户端连接数] RPC类名:RPC的sessionId>resultCode 回复Bean内容 // 发送RPC回复
Send[客户端连接数] 协议类名 协议Bean内容 // 发送协议
Send[客户端连接数] 协议类名>resultCode 协议Bean内容 // 发送带resultCode的协议

gs通过Zeze.Arch.ProviderImplement.ProcessDispatch接收封装成Dispatch的协议:
Recv:roleId RPC类名:RPC的sessionId 请求Bean内容 // 发送RPC请求
Recv:roleId RPC类名:RPC的sessionId>resultCode 回复Bean内容 // 发送RPC回复
Recv:roleId 协议类名 协议Bean内容 // 发送协议
Recv:roleId 协议类名>resultCode 协议Bean内容 // 发送带resultCode的协议

gs通过Zeze.Arch.ProviderUserSession.sendResponse(Protocol)发封装成Send的协议:
Send:roleId RPC类名:RPC的sessionId 请求Bean内容 // 发送RPC请求
Send:roleId RPC类名:RPC的sessionId>resultCode 回复Bean内容 // 发送RPC回复
Send:roleId 协议类名 协议Bean内容 // 发送协议
Send:roleId 协议类名>resultCode 协议Bean内容 // 发送带resultCode的协议

gs通过Zeze.Game.Online.send发封装成Send的协议:
Send:roleId RPC类名:RPC的sessionId 请求Bean内容 // 发送RPC请求
Send:roleId RPC类名:RPC的sessionId>resultCode 回复Bean内容 // 发送RPC回复
Send:roleId 协议类名 协议Bean内容 // 发送协议
Send:roleId 协议类名>resultCode 协议Bean内容 // 发送带resultCode的协议
多组"roleId"会以"roleId,roleId,..."方式输出

gs通过Zeze.Game.Online.sendReliableNotify发封装成SReliableNotify的协议:
Send:roleId:listenerName RPC类名:RPC的sessionId 请求Bean内容 // 发送RPC请求
Send:roleId:listenerName RPC类名:RPC的sessionId>resultCode 回复Bean内容 // 发送RPC回复
Send:roleId:listenerName 协议类名 协议Bean内容 // 发送协议
Send:roleId:listenerName 协议类名>resultCode 协议Bean内容 // 发送带resultCode的协议

gs通过Zeze.Arch/Game.Online.broadcast(Protocol)发封装成Broadcast的协议:
Send[link连接数] RPC类名:RPC的sessionId 请求Bean内容 // 发送RPC请求
Send[link连接数] RPC类名:RPC的sessionId>resultCode 回复Bean内容 // 发送RPC回复
Send[link连接数] 协议类名 协议Bean内容 // 发送协议
Send[link连接数] 协议类名>resultCode 协议Bean内容 // 发送带resultCode的协议

gs通过Zeze.Arch.Online.send发封装成Send的协议:
Send:account,clientId RPC类名:RPC的sessionId 请求Bean内容 // 发送RPC请求
Send:account,clientId RPC类名:RPC的sessionId>resultCode 回复Bean内容 // 发送RPC回复
Send:account,clientId 协议类名 协议Bean内容 // 发送协议
Send:account,clientId 协议类名>resultCode 协议Bean内容 // 发送带resultCode的协议
多组"account,clientId"会以"account,clientId;account,clientId;..."方式输出

gs通过Zeze.Arch.Online.sendAccount/sendAccounts发封装成Send的协议:
Send:account RPC类名:RPC的sessionId 请求Bean内容 // 发送RPC请求
Send:account RPC类名:RPC的sessionId>resultCode 回复Bean内容 // 发送RPC回复
Send:account 协议类名 协议Bean内容 // 发送协议
Send:account 协议类名>resultCode 协议Bean内容 // 发送带resultCode的协议
多组"account"会以"account,account,..."方式输出

gs通过Zeze.Arch.Online.sendReliableNotify发封装成SReliableNotify的协议:
Send:account,clientId:listenerName RPC类名:RPC的sessionId 请求Bean内容 // 发送RPC请求
Send:account,clientId:listenerName RPC类名:RPC的sessionId>resultCode 回复Bean内容 // 发送RPC回复
Send:account,clientId:listenerName 协议类名 协议Bean内容 // 发送协议
Send:account,clientId:listenerName 协议类名>resultCode 协议Bean内容 // 发送带resultCode的协议
