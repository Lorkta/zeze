Zeze作为微服务框架内一个服务的支持。

需求来源
如果元宇宙很成功，完全一个全包模式，不能回避王鹏提到的问题，一个模块出问题，可能影响所有的。
虽然zeze可以每进程配置不同的服务模块，但还是一个进程的。
一个全包模式避免了分解微服务的问题，但实际情况下，肯定有些新增或现有的模块和其他模块的关联是比较稳定，
此时可以拆解出来作为一个微服务。

目标
0. 直接使用现有的微服务框架，
1. 首先选择一个微服务框架，接入它。
2. 以后根据需要再增加不同微服务框架的支持。

核心问题
1. 服务注册和实现，
2. 服务发现和使用，

实现和计划
0. 这个东西看起来不是很紧急。
1. 服务实现与事务绑定提供辅助代码。目标还是用户编写逻辑即可。模式上看作不同的处理请求来源，如，zeze自己的rpc，Netty, 微服务rpc。
2. 调研并选择接入的第一个微服务框架。

可靠Rpc？
1. 对于客户端到服务器这类直接交互服务，建议"账单"方式解决。系统只需要解决重复的不执行就够安全了。
比如转账请求客户端生成唯一Id，服务器验证”账单“里面已有，拒绝执行，并通知用户查账确认。
这里”账单“既是防重复也是正常功能。从这个情况来看，这里就不该用可靠Rpc解决问题，而是具体功能具体分析。
2. 可靠Rpc是否保存结果，并在收到重复请求时，返回上次的结果？这点也是不好确定的。
对于increaceAndGet，返回上一次结果还比较合适，但对于更通常的logicModifyGet，是否就返回上次计算的结果，
不是很好确定，有时候。需要返回最新的。当然大多数情况下，返回上一次的结果可能都比较合适。
3. 服务器是否完全等价。我在Raft那里使用了返回上一次结果的机制（可选，并且建议结合RocksRaft事务机制）。
因为raft的服务器是完全等价的。对于zeze服务还可能比较容易认为是等价的。但更通常的服务器，是否完全等价有待确认。
4. 可靠Rpc的代价，需要对所有的rpc执行记录日志。raft本身就有日志，顺便扩展了一下。而这个是没办法的。
但所有的一般服务是否都需要这么重度的日志记录呢？

