//////////////////////////////////////////////////////////////////////////////////////
// 旧内容，可快速略过。

dbh2
	或者叫dbh2，不依赖db.h，这个名字有纪念意义。
	rocksdb桶：部分表，部分key。
	桶的管理和分配。关键！
	桶的raft。
	并发：zeze专用，无需复杂并发控制。或者几乎不需要？
	使用c++？【第一版还是java，以后真有用处，并且找到人，再转成c++】
	raft c++？
	c++ net？wepoll

Database
	每个Database包含多张表。
	多Database。

Table
	kv表

Bucket
	每个kv表按一定规则分到不同的桶里面。
	每个桶由raft节点组成。

Bucket-Route
	kv划分规则：1. sort；2. hash

Bucket-Route-Sort
	需要一个有顺序按段划分byte[]的算法。关键问题是划分段多大。下面的方法能工作。
	现在考虑到的方法是动态规划路由：一开始一个桶，容量超过了，就从现有的记录数量中间拆分成两个。
	然后两个桶来用。等到其中一个桶又超出了，再拆分。暂不考虑合并桶（删除是少见的）。

Bucket-Route-Hash（第一版不实现）
	一致性hash算法。
	当桶增加时，需要能感知需要迁移的桶。
	现在Zeze采用的一个最常用的算法，可以继续采用，但是由于感知迁移桶的需求，
	不能使用虚拟节点。暂时考虑的策略是，一开始就建立足够数量桶（节点）。

Bucket-Hot-Split(Sort)
	热点桶二分法拆分，规则和Bucket-Route-Sort一样。

进程（模块）
	Master，知道所有数据库，所有表，所有桶的分布情况。提供表创建，桶信息查询。
	Dbh2Manager，桶运行容器，包含多个桶。
	Dbh2Agent，嵌入到dbh2的客户端内执行。由于嵌入执行，App会影响一点提交安全性。见CommitServer。
	CommitServer，Dbh2Agent的提交功能移到这里，独立服务器，仅用来提交事务。
	* Dbh2Agent/CommitServer 二选一，可配置。

===============================================================
问题
===============================================================
1. 两段式事务。
根本支持来自RocksDb；下面的逻辑在Agent中执行。
var transList = new list(); // 维护当前事务需要访问的所有Database的事务实例。
foreach (var key in keys)
{
	var dbInfo = Master.Query(key); // 为了性能，需要cache，问题？cache更新以及最终用目标Database主动报错。
	var conn = Dababase.getOrAdd(out maybe transList, dbInfo); // 查询或新建连接，第一次建立链接需要创建事务。
	conn.executeUpdate(key, value);
}
foreach (var trans in transList)
{
	trans.commit();
}

2. 事务并发。
上面的事务是多记录写，读取总是一个事务读取一条记录。对于读写并发，RocksDb已经保证了基本的并发。
其他多记录写的事务并发由Zeze解决。Zeze保证所有的写事务之间没有交集。
所以！本系统不需要任何并发控制。【桶的迁移是一个需要锁并且等待的操作，这个待定】

3.Raft怎么接入以及完整的事务方案
     RocksDB+Batch
    【确定采用这个方案了，原来麻雀版的基于OptimisticTransactionDB的方案作废】
     同一个桶的数据操作合并到一个批处理中，一次完成。

    . Zeze用Dbh2.Agent 对任意表任意记录进行flush时，Agent负责把所有的flush分组到不同桶的batch里面。分解完成，事务提交时，才开始和桶交互。
    . 分为PrepareBatch,CommitBatch,UndoBatch。
    a) PrepareBatch 桶的处理是首先检查数据确实在这个桶内，并收集这个Batch的UndoLog（这里说法不对，详见后面的实现细节），并加锁，
    然后Raft.appendLog进行apply。关于加锁，数据访问并发实际上由zeze保证互斥，这个加锁仅仅
    用于桶的动态并发拆分。有点大材小用的感觉。但是要支持动态并发拆分好像也没有其他好办法。
    b) CommitBatch，桶释放锁，删除内存中的Batch状态。
    c) UndoBatch，桶把UndoLog作为一次Raft.appendLog请求重做一次。

【Agent 伪码】
foreach(bucket : buckets)
	bucket.PrepareBatch(); // 任何Prepare失败，执行全部UndoBatch(); 这里略。
localTransactionFileLog.add(tid，buckets, timestamp); // 二段式提交关键点。持久化以后用于系统宕机重启以后继续提交。
foreach (bucket : buckets)
	bucket.CommitBatch();
localTransactionFileLog.remove(tid); 【不能删除，慢速GC，删除7天前的】
see https://blog.csdn.net/lengxiao1993/article/details/88290514

【桶的实现伪码】
Raft.Leader.OnPrepareBatch(batch) {
	// 由于锁定解锁跨线程，所以这里的锁应该用信号量(Semaphore)。
	if (inBucketAndLock()) {
		// leader需要检查inBucket和lock error，并马上报告结果。
		tid = allocateTid();
		appendLog(tid, batch);
		r.Result.setTid(tid);
		r.sendResult();
		return;
	}
	r.sendResultCode(error_code);
}
LogPrepareBatch.apply(tid, batch) {
	// leader在预先检查阶段已经加锁，事务会存在。所以用getOrAdd。
	// 构造函数里面加锁。
	var txn = transaction.getOrAdd(tid, new Dbh2Transaction(batch));
	batchTransaction.put(tid, txn);
}

Raft.Leader.OnCommitBatch(tid) {
	appendLog(tid);
}
LogCommitBatch.apply(tid) {
	// 所有raft节点。
	var txn = batchTransaction.remove(tid);
	if (null != txn) // 允许重复的Commit。
		txn.close(); // unlockAll
}

Raft.Leader.OnUndoBatch(tid) {
	appendLog(tid);
}
LogUndoBatch.apply(tid) {
	// 所有raft节点。
	var txn = batchTransaction.remove(tid);
	if (null != txn) // 允许重复的RaftUndoLog.
		txn.undoBatch(bucket);
}

【问题】
1). commit流程不能失败，会不停尝试。关键点见【Agent伪码的localTransactionFileLog.add】。
2). 事务系列化的能力。
    没有完成的事务，桶会保持锁，所以后续的读写都会失败，这样虽然保证了事务系列化，
    但是系统可用性被agent所在服务器波及到。
3). commit关键点是否独立出新的服务进程。
    由于现在commit由agent控制，agent嵌入zeze-server进程，而zeze-server进程比较复杂，
    又没有可靠性支持（如raft），本来是无状态设计。如果agent所在zeze-server一直没有恢复，
    由于第2点，会造成系统慢慢变得不可用。可以考虑采用把commit流程独立成新的服务，
    这个新的服务更纯粹，更不容易出错，另外这个新的服务可以加入raft，提高可用性。
4). UndoBatch 可重复，桶忽略重复的。
5). CommitBatch 可重复，桶忽略重复的。
6). Raft-Snapshot 截断相关操作。
     PrepareBatch 创建了logs，进行中的操作才可以Undo（Undo的数据来源）。
     如果Snapshot把未完成的事务的PrepareBatch截断了，Undo将无法进行。
     解决方法：raft支持延迟snapshot，本次snapshot时，实际提交的是上一次（如果存在）的snapshot。
7). PrepareBatch 流程中断造成桶的正在进行的事务一直空悬。
     桶主动查询事务所在的Agent，判断是否（localTransactionFileLog）关键点(isCommtting)，
     if (isCommitting) commit(); else undo(); 查询失败下一次尝试，必须能查询到结果。
     【localTransactionFileLog 在事务成功结束以后不会删除】。

4. 桶按key排序分段，写入是怎么提高并发。
    hash方式看起来具有极大的并发写入速度。

5.并发walk，同时向不同的DatabaseService发送walk请求。归并（按顺序？）

6.MapReduce。

7. 分桶需求
	分桶时仍然能提供服务。
	Master维护所有的桶信息，分桶完成之前，不会route的目标桶。
	Master拥有正在进行分桶的信息，目前看来，仅仅用来监控。

8. 并发分桶
分桶阶段一（同步数据阶段），
a)Dbh2Manager找到分桶的中间key。
b)Dbh2Manager通过Master查找可以创建新桶的manager并创建分桶，此新创建的桶不可见。
c)Dbh2Manager开始拷贝中间key之后（是否包含？）数据到新桶。维护已经拷贝过去的current-key。
d)Dbh2Manager此时继续提供服务，如果事务更新的数据在key,current-key之间，这些数据操作马上同步到新桶。
e)Dbh2Manager当同步拷贝完成，新桶写入Meta，更新Master信息，新桶此时已经开始可以接受服务。旧桶写入新的Meta，回退key之后的事务！。
【分桶完成发布原子化】
  1. 每个桶记住自己分出去的所有新桶的Meta(SplitMetaAll)。
  2. 源桶在一个RaftLog中设置新的Meta和保存新桶的Meta到SplitMetaAll并进入拒绝模式。【原子化！】
  3.1 拒绝模式中，对没有落在桶最新范围的所有记录，去SplitMeta中locate得到目标桶信息，一起返回给Agent。
  3.2 向Master发布新桶和旧桶信息。【一个协议里面修改两个】
 【分析】
 【SplitMetaAll例子】
  tableCreate: [empty,empty) - 初始桶
  firstSplit: [empty, first)[first, empty)
  secondSplit: [empty, second)[second, first)[first, empty)
  * 总是从当前桶分割，所以，第一个总是empty。
 【firstSplit 目标桶进行自己的分桶的例子】
  firstSplit: [first, empty) - 初始桶，分桶不需要记录更早的历史。
  secondSplit: [first, second)[second, empty)
  *** 桶能收到记录范围是自己第一次创建以后的，加上又记录了以后所有分桶的目标信息，
  *** 所以在拒绝模式时，总是能得到正确的目标桶，不管此时Master发布信息是否更新。
  *** 上面第2步还可以删除描述分桶进行中的状态信息（deleteSplittingMeta)，这个不是原子化的一部分，一个操作里面完成，算优化。

分桶阶段二（回退阶段），
a)Dbh2Manager发现batch中不是本桶的记录，收集以后回退给agent，并报告桶信息需要更新错误码。
b)Agent收到回退，创建新的Batch，迁移记录到此。
c)Agent更新桶信息，访问新桶，发送新创建的Batch给它。

分桶阶段三（删除分走的数据）
此阶段和阶段二并行。

9. 分桶阶段一详细设计
a) special.deleted.record 删除的记录不会真正删除，而是保留value为空的记录，正常数据value不能为空。
对于分桶完成，已经公开的桶，这个特殊记录可以用垃圾回收的方案删掉。
b) 事务同步流程
源桶收到的事务提交的时候把修改的记录落到需要拷贝的key区间，马上复制一份到目标桶。
c) 复制流程
var count = rocks.getKeyNumber() / 2;
var it = rocks.iterator();
for (it.seekToFirst(); it.isValid() && count > 0; it.next(), --count) {
}
if (!it.isValid())
	return; // must empty. impossible
for (; it.isValid(); it.next()) {
	// 【关键点 putIfAbsent】复制流程级别低，
	// 如果存在事务同步过来的结果，由于special.deleted.record，这个结果包含了所有最新的信息。
	targetBucket.rocksdb.putIfAbsent(it.key(), it.value());
}
d) 错误处理总则
i. 事务同步流程采用异步接口，发生错误，重新开始复制流程c)。基本原则是不影响正常事务的处理。
ii. 复制流程采用异步接口，发生错误，不断重试当前key。【也处理成重启复制流程了】
