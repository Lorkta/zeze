//////////////////////////////////////////////////////////////////////////////////////
// 旧内容，可快速略过。

dbh2
	或者叫dbh2，不依赖db.h，这个名字有纪念意义。
	rocksdb桶：部分表，部分key。
	桶的管理和分配。关键！
	桶的raft。
	并发：zeze专用，无需复杂并发控制。或者几乎不需要？
	使用c++？【第一版还是java，以后真有用处，并且找到人，再转成c++】
	raft c++？
	c++ net？wepoll

Database
	每个Database包含多张表。
	多Database。

Table
	kv表

Bucket
	每个kv表按一定规则分到不同的桶里面。
	每个桶由raft节点组成。

Bucket-Route
	kv划分规则：1. sort；2. hash

Bucket-Route-Sort
	需要一个有顺序按段划分byte[]的算法。关键问题是划分段多大。下面的方法能工作。
	现在考虑到的方法是动态规划路由：一开始一个桶，容量超过了，就从现有的记录数量中间拆分成两个。
	然后两个桶来用。等到其中一个桶又超出了，再拆分。暂不考虑合并桶（删除是少见的）。

Bucket-Route-Hash（第一版不实现）
	一致性hash算法。
	当桶增加时，需要能感知需要迁移的桶。
	现在Zeze采用的一个最常用的算法，可以继续采用，但是由于感知迁移桶的需求，
	不能使用虚拟节点。暂时考虑的策略是，一开始就建立足够数量桶（节点）。

Bucket-Hot-Split(Sort)
	热点桶二分法拆分，规则和Bucket-Route-Sort一样。

进程
	MasterService，
	DatabaseService，
	Agent，嵌入到dbh2的客户端内执行，
	AgentService，把Agent的功能包装成服务，无状态的dbh2链接机器，用来提高事务安全性，因为嵌入式受应用影响，可能不够安全。
		AgentService 可以解决commit中途挂掉。RocksDb Sync。先Commit，后在事务Id的相关桶里面记录。
		DatabaseService需要能识别出重复的Commit并忽略。
		有了事务提交中途落地状态，AgentService可以省掉。

===============================================================
问题
===============================================================
1. 两段式事务。
根本支持来自RocksDb；下面的逻辑在Agent中执行。
var transList = new list(); // 维护当前事务需要访问的所有Database的事务实例。
foreach (var key in keys)
{
	var dbInfo = Master.Query(key); // 为了性能，需要cache，问题？cache更新以及最终用目标Database主动报错。
	var conn = Dababase.getOrAdd(out maybe transList, dbInfo); // 查询或新建连接，第一次建立链接需要创建事务。
	conn.executeUpdate(key, value);
}
foreach (var trans in transList)
{
	trans.commit();
}

2. 事务并发。
上面的事务是多记录写，读取总是一个事务读取一条记录。对于读写并发，RocksDb已经保证了基本的并发。
其他多记录写的事务并发由Zeze解决。Zeze保证所有的写事务之间没有交集。
所以！本系统不需要任何并发控制。【桶的迁移是一个需要锁并且等待的操作，这个待定】

//////////////////////////////////////////////////////////////////////////////////////
// 新内容。
3.Raft怎么接入以及完整的事务方案
     RocksDB+Batch
    【确定采用这个方案了，原来麻雀版的基于OptimisticTransactionDB的方案作废】
     同一个桶的数据操作合并到一个批处理中，一次完成。

    . Zeze用Dbh2.Agent 对任意表任意记录进行flush时，Agent负责把所有的flush分组到不同桶的batch里面。分解完成，事务提交时，才开始和桶交互。
    . 分为PrepareBatch,CommitBatch,UndoBatch。
    a) PrepareBatch 桶的处理是首先检查数据确实在这个桶内，并收集这个Batch的UndoLog（这里说法不对，详见后面的实现细节），并加锁，
    然后Raft.appendLog进行apply。关于加锁，数据访问并发实际上由zeze保证互斥，这个加锁仅仅
    用于桶的动态并发拆分。有点大材小用的感觉。但是要支持动态并发拆分好像也没有其他好办法。
    b) CommitBatch，桶释放锁，删除内存中的Batch状态。
    c) UndoBatch，桶把UndoLog作为一次Raft.appendLog请求重做一次。

【Agent 伪码】
foreach(bucket : buckets)
	bucket.PrepareBatch(); // 任何Prepare失败，执行全部UndoBatch(); 这里略。
localTransactionFileLog.add(tid，buckets, timestamp); // 二段式提交关键点。持久化以后用于系统宕机重启以后继续提交。
foreach (bucket : buckets)
	bucket.CommitBatch();
localTransactionFileLog.remove(tid); 【不能删除，慢速GC，删除7天前的】
see https://blog.csdn.net/lengxiao1993/article/details/88290514

【桶的实现伪码】
Raft.Leader.OnPrepareBatch(batch) {
	// 由于锁定解锁跨线程，所以这里的锁应该用信号量(Semaphore)。
	if (inBucketAndLock()) {
		// leader需要检查inBucket和lock error，并马上报告结果。
		tid = allocateTid();
		appendLog(tid, batch);
		r.Result.setTid(tid);
		r.sendResult();
		return;
	}
	r.sendResultCode(error_code);
}
LogPrepareBatch.apply(tid, batch) {
	// leader在预先检查阶段已经加锁，事务会存在。所以用getOrAdd。
	// 构造函数里面加锁。
	var txn = transaction.getOrAdd(tid, new Dbh2Transaction(batch));
	batchTransaction.put(tid, txn);
}

Raft.Leader.OnCommitBatch(tid) {
	appendLog(tid);
}
LogCommitBatch.apply(tid) {
	// 所有raft节点。
	var txn = batchTransaction.remove(tid);
	if (null != txn) // 允许重复的Commit。
		txn.close(); // unlockAll
}

Raft.Leader.OnUndoBatch(tid) {
	appendLog(tid);
}
LogUndoBatch.apply(tid) {
	// 所有raft节点。
	var txn = batchTransaction.remove(tid);
	if (null != txn) // 允许重复的RaftUndoLog.
		txn.undoBatch(bucket);
}

【问题】
1). commit流程不能失败，会不停尝试。关键点见【Agent伪码的localTransactionFileLog.add】。
2). 事务系列化的能力。
    没有完成的事务，桶会保持锁，所以后续的读写都会失败，这样虽然保证了事务系列化，
    但是系统可用性被agent所在服务器波及到。
3). commit关键点是否独立出新的服务进程。
    由于现在commit由agent控制，agent嵌入zeze-server进程，而zeze-server进程比较复杂，
    又没有可靠性支持（如raft），本来是无状态设计。如果agent所在zeze-server一直没有恢复，
    由于第2点，会造成系统慢慢变得不可用。可以考虑采用把commit流程独立成新的服务，
    这个新的服务更纯粹，更不容易出错，另外这个新的服务可以加入raft，提高可用性。
    -- 独立先不做，因为嵌入agent可靠性已经不错了。
4). UndoBatch 可重复，桶忽略重复的。
5). CommitBatch 可重复，桶忽略重复的。
6). Raft-Snapshot 截断相关操作。
     PrepareBatch 创建了logs，进行中的操作才可以Undo（Undo的数据来源）。
     如果Snapshot把未完成的事务的PrepareBatch截断了，Undo将无法进行。
     解决方法，Snapshot截断点往回退一段时间（比如30分钟），不要截断正在进行中的事务操作日志。
     这个方法虽然不完美，但可用性一般来说足够了。欢迎拍砖。
7). PrepareBatch 流程中断造成桶的正在进行的事务一直空悬。
     桶主动查询事务所在的Agent，判断是否（localTransactionFileLog）关键点(isCommtting)，
     if (isCommitting) commit(); else undo(); 查询失败下一次尝试，必须能查询到结果。
     【localTransactionFileLog 在事务成功结束以后不会删除】。

//////////////////////////////////////////////////////////////////////////////////////
// 旧内容，可快速略过。
4. 桶按key排序分段，写入是怎么提高并发。
    hash方式看起来具有极大的并发写入速度。

5.并发walk，同时向不同的DatabaseService发送walk请求。归并（按顺序？）

6.MapReduce。

7. Bucket-Split需求
	记录级别并发拆分：正在迁移的记录的访问需要等待。其他并发。
	问题要点：
	已经迁移完成的正常访问，迁移未完成按老的方式访问，这两种是否存在什么问题。
	算法思路要点：
	[1,2,3,4,5,6,7,8,9]
	[1,2,3,4,5] [6之后并发迁移到新的桶。]
	            [6,7*] 假设当前迁移记录是7.
	void access(key)
	{
		var bucket = route(key);
		if (bucket.moving)
		{
			// 【实际上下面没有考虑真正的锁定关系，纯伪码】
			var movingkey; // 7
			if (key < movingkey)
				bucket.normalAccess;
			if (key == movingkey) {
				wait;
				bucket.normalAccess;
			}
			bucket.oldbucket.normalAccess; // oldbucket 是拆分前的旧桶。
		}
		else
		{
			bucket.normalAccess;
		}
	}

8. 并发分桶
    a) Master维护所有的桶信息，分桶完成之前，不会route的目标桶。
    b) Master拥有正在进行分桶的信息，目前看来，仅仅用来监控。
    c) 正在进行分桶的服务器维护记录锁（本进程即可）。
    d) 所有桶数据操作使用锁如下：
    Bucket.Get() {
	lock();
	return data.copy();
	unlock();
    }
    Bucket.Transaction(): 
	putOrDelete() {
		lockAndAddTo(trans); // 事务中操作的key锁住，此时分桶操作等待事务完成。
		rocksdb.putOrDelete();
	}
	commit() {
		rocksdb.commit();
		unlockAllLockInTrans();
	}
    Bucket.ConcurrentSplit()	
	{
		var last = srcBucket.last();
		while (last != first) {
			last.lock(); // 一次迁移一条记录。
			moveRecordToDstBucket();
			last.unlock();
		}
	}
     e) Bucket.RouteRedirect()
	上面第7点的补充说明。
	i. 分桶完成之前，master都是返回srcBucket。
	ii. srcBucket判断已经分走，redirect到dst桶。dst桶按上面第d)点执行锁操作
	   虽然目标桶没完全准备好之前，不可能再次被分开，但是锁操作还是统一。
	iii. srcBucket判断的时候需要锁住，对于正在moving的，会等待锁，然后发现已经被moved，然后被redirect。
	iiii. srcBucket判断不会分走的，src桶按上面第d)点执行所操作。
	*. 对于正在moving的记录，有两个事务，会锁柱两个锁。src的，dst的。其中src锁在redirect时可以提前释放掉。

其他细节，不看。

	并发写？
	beginTransaction();
	Transaction { buckets; }
	put(transaction, key, value)
	{
		var bucket = route(key);
		transaction.add(bucket); // 第一次加入Rocks.beginTransaction
		bucket.put(); // 迁移中的参考上面一段。
	}
	delete(key)
	{
		var bucket = route(key);
		transaction.add(bucket); // 第一次加入Rocks.beginTransaction
		bucket.delete(); // 迁移中的参考上面一段。
	}

	Transaction.commit()
	{
		for (var bucket : buckets)
			bucket.commit();
	}

	Bucket
	{
		void put();
		void delete();
		void get();
	}

	并发还是需要锁，模型待定！！！
	? get总是允许读取，由zeze保证系列化。
	？put，delete在事务中，rocks保护get可见性，由zeze保证系列化。
	？剩下的就是迁移中等待（采用bucket本地锁，本地迁移保护，迁移中的记录）
	总的并发：单个记录级别锁定，get访问结束即可释放锁，事务中的等待事务提交才释放锁。
