目前zeze没有考虑更新发布的问题，还没太多支持。

0. 停止全部服务器，更新，重启。
    这里可能还包括需要更新客户端。
   【不需要额外支持】
   【更新频率不会太高，重启够快，这个方案最简单，虽然之后会出现一定的登录高峰，但一般都扛的住】
   【但系统规模越来越大，更新频率可能也会越来越高，这会导致大量重启，此时就需要考虑其他方式了】

1. 一台一台更新服务器。
   服务器更新兼容，可以新旧混合一起运行。
   【需要Arch.Linkd能识别到新旧服，不给旧服分配新登录（马上就要关了）】
   方案草稿：
   a) App 需要定义版本号。
   b) 调用 Schemas.setAppPublishVersion
   c) server 给linkd报告Info时带上版本号。【TODO】
   d) linkd 发现多个版本号，则只给最新的分发新登录。【TODO】
   e) 新旧版有同时运行的时刻，后端数据库访问的时候，旧版不能把新版新增的变量搞丢了。【已实现，下面碰到这个需求不再列出】

2. 新旧版本同时运行，分成两个集合，两者之间几乎没有交互。旧集合逐步关闭。
    a) ServiceManager 在动态管理服务器时，不能把两个集合混起来。
      【通过应用提供的带上版本号的PrefixName自动形成不同的集合】【Zeze已支持，由应用进行配置】
    b) 新旧集合之间可能需要通讯，Zeze需要提供一点支持。【TODO】
    c) 这个方案难点在于应用的所有功能能不能得到合理安排。【XXX】
    e) Linkd使用独立发现（DNS）,新旧版连接到不同的Linkd集合。
       【每个版本都需要更新DNS？】
       【DNS不属于Zeze功能，但Linkd发现，Zeze以后是否需要提供支持机制？（DNS已经够好了，自己提供价值不大）】
    f) 在更新频率高的时候，如果只是新旧两个，也是扛不住的。可能需要扩展成同时运行更多版本。

3. ClassLoader 调研。
    按Module（一个或几个）一起热更是否可行。
   【打破所有Module都互联的假设，采用微服务思想，对Module进行打包处理】

4. Arch.Linkd.ChoiceProvider 机制上花招。

