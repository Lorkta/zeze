可重用游戏地图模块
	参考流行的某个游戏，基本实现它的主要可重用特征。
	新游戏可以直接在这个基础上进行开发，降低开发成本。

一、地图模块MMO类开发目标
【服务器功能列表】
0. 多线程逻辑运算；尽可能不对任意游戏的地图交互逻辑运算的实现造成障碍；
1. 移动同步实现一个（参考魔兽世界）
2. Aoi “9”宫格视野同步，支持2d，3d切割。
   a) AoiSimple基本版本；
   b) AoiStable解决玩家在切割线上来回穿越造成”9“宫格通知不断进入离开的问题。（TODO）
   *) 玩家扎堆时，Aoi广播量可能需要保护。降低或丢弃视野内的移动同步。
      尽量提高Aoi能支持的同屏在线。由于同屏在线一般性能在客户端，所以这个对于服务器可能不是问题。（TODO）
   *) 玩家扎堆时，按一定规则限制玩家的可见列表。这个需求把问题复杂化了。仅供考虑。
3. 服务器寻路
   主要目标用于AI寻路；建议客户端自己寻路；如果玩家寻路也要在服务器计算，可能需要提供不一样的寻路版本。
   a) 体素寻路（TODO）
   b) NavMesh寻路（TODO）
   *) 上面的寻路是场景变化不会影响寻路的。对于动态寻路已知也有人做过。如果能达到这个目标那就更好了。（TODO）
4. 视野同步还有技能，换装等任何需要在大世界里面表现的操作
    a) 对于时序不敏感的，只要最终数据同步能到客户端即可。这个由Aoi实现数据同步。比如换装。
    b) 技能有一定时效性，需要评估抽象并提供一定支持。（TODO）
5. 作弊检查思路
    a) 直接嵌入计算流程，即时的做出判断。一般是移动的太快，或者技能发送的太快。
        建议分为两级：达到怀疑级别，把这个玩家提交给进行更高级的作弊检查；达到限制级，马上惩罚。
        对于移动的惩罚例子如拉回原位。（TODO）
        嵌入作弊判断，可以在某些处理关键点提供回调实现自定义。（TODO）
    b) 进程内的其他线程的稍微慢速，但更完备的检查。
    c) 其他进程服务。比如直接运行几个unity，用来做完备的3d场景场景作弊检查。

*. 附录-路同学提供的看法
我大致看了一下, 主要分这四部分, 都是MMO基本都要用到的:
状态同步 (难点在网络延迟大时的补偿)
AOI (难点在限制广播量)
碰撞检测(多面体 or 体素)
寻路(导航网格 or 体素)
我上个项目做过战斗的状态同步, 挺大的坑, 跟客户端反复想调优策略, 网络延迟属于没有完美解决方案的不利条件, 可能需要根据不同的玩法场合做不同的细节设计.
上个项目的碰撞检测是凸包多面体+四叉树, 从完美老项目C++移植到Java, 代码量不大, 优化后基本跟C++性能差不多了, 这个难度最低.
上个项目的寻路是导航网格, 用的是最常用的recastnavigation开源项目, Unity和UE内置的寻路好像都是从这个魔改来的. Java用JNI封装调用. 
难点是动态修改(上个项目做过), 这个坑也挺大, 对于动态变化非常频繁的, 也许可以考虑直接用体素.
AOI简单写一个不难, 难点是玩家密集时的处理, 要避免大量广播. 通常的做法是每个玩家有个可见集合, 但要做好这个也不简单, 
通常需要考虑可见性需要互相的, 可见数量要保持动态均衡, 可见人数少了要补上, 多了要剔除, 而且可见性还要考虑优先级.

【客户端功能列表】
1. 总目标
2. 
