<?xml version="1.0" encoding="utf-8"?>

<solution name="Zege" ModuleIdAllowRanges="1-1000">
	<import file="solution.linkd.xml"/>
	<import file="../ZezeJava/solution.zeze.xml"/>

	<module name="User" id="1">
		<enum name="eAccountHasUsed"     value="1" />
		<enum name="eAccountHasPrepared" value="2" />
		<enum name="ePrepareExpired"     value="3" />
		<enum name="ePrepareNotOwner"    value="4" />
		<enum name="eAccountInvalid"     value="5" />

		<bean name="BUser">
			<!-- 基本信息 -->
			<variable id="1" name="Account"    type="string" />
			<variable id="2" name="Type"       type="int" />
			<variable id="3" name="CreateTime" type="long" />
			<variable id="4" name="Nick"       type="string" /> 不唯一

			<!-- 证书 -->
			<variable id="20" name="LastCertIndex"     type="int" default="-1" /> 给客户端分配Index用，递增。客户端对自己需要保存所有证书和Key。
			<variable id="21" name="Cert"              type="binary" />

			<enum name="StatePrepare" value="0" />
			<enum name="StateCreated" value="1" />

			<variable id="22" name="State"             type="int" />
			<variable id="23" name="PrepareTime"       type="long" />
			<variable id="24" name="PrepareRandomData" type="binary" />

			<!-- 实名 -->
			<enum name="RealFlagIdentityCard" value="1" />
			<enum name="RealFlagPhone"        value="2" />
			<enum name="RealFlagBankCard"     value="4" />
			<enum name="RealFlagFaceToFace"   value="8" />

			<variable id="30" name="RealFlags"    type="long" />
			<variable id="31" name="RealName"     type="string" />
			<variable id="32" name="IdentityCard" type="string" /> 和账号一一对应
			<variable id="33" name="Phone"        type="string" /> 一个phone可以对应多个账号，有上限
			<variable id="34" name="BankCard"     type="list" value="string" />
			<variable id="35" name="FaceToFace"   type="bool" /> 当面认证(银行合作，付费？)，保存视频照片等认证记录，需要 IdentityCard 和 MobilePhone，可以不用绑定银行卡。
		</bean>

		<bean name="BAccount">
			<variable id="1" name="Account"  type="string" />
		</bean>

		<bean name="BAccounts">
			<variable id="1" name="Accounts"  type="set" value="string" />
		</bean>

		<bean name="BUserPhoto">
			<variable id="1" name="Photo" type="binary" />
		</bean>

		<table name="tUser"         key="string" value="BUser" /> key is account
		<table name="tIdentiryCard" key="string" value="BAccount" /> key is identirycard
		<table name="tPhone"        key="string" value="BAccounts" /> key is phone
		<table name="tUserPhoto"    key="string" value="BUserPhoto"/> key is account

		<!-- protocol -->
		<bean name="BPrepare">
			<variable id="1" name="Account"  type="string" />
		</bean>

		<bean name="BPrepareResult">
			<variable id="1" name="RandomData" type="binary" />
		</bean>

		<rpc name="Prepare" argument="BPrepare" result="BPrepareResult" handle="server" />

		<bean name="BCreateArgument">
			<variable id="1" name="Account" type="string" />
			<variable id="2" name="RsaPublicKey" type="binary" />
			<variable id="3" name="Signed" type="binary" />
		</bean>
		<bean name="BCreateResult">
			<variable id="1" name="LastCertIndex" type="int" /> last cert index
			<variable id="2" name="Cert" type="binary" /> der format
		</bean>
		<rpc name="Create" argument="BCreateArgument" result="BCreateResult" handle="server" />

		<bean name="BCreateWithCertArgument">
			<variable id="1" name="Account" type="string" /> 用来确认。客户端可简化为自动填充。
			<variable id="2" name="Cert" type="binary" /> der format
			<variable id="3" name="Signed" type="binary" />
		</bean>
		<rpc name="CreateWithCert" argument="BCreateWithCertArgument" handle="server" />

		<bean name="BVerifyChallengeResultArgument">
			<variable id="1" name="Account" type="string" />
			<variable id="2" name="RandomData" type="binary" />
			<variable id="3" name="Signed" type="binary" />
		</bean>
		<rpc name="VerifyChallengeResult" argument="BVerifyChallengeResultArgument" handle="server" />

		<servlet name="Prepare"/>
		<servlet name="Create"/>
		<servlet name="CreateWithCert"/>
	</module>

	<module name="Friend" id="2">
		<enum name="eDepartmentNotFound"        value="1"/>
		<enum name="eFriendNodeNotFound"        value="2"/>
		<enum name="eMemberNodeNotFound"        value="3"/>
		<enum name="eDeparmentMemberNotInGroup" value="4"/>
		<enum name="eUserNotFound"              value="5"/>
		<enum name="eManagePermission"          value="6"/>
		<enum name="eNotGroupMember"            value="7"/>
		<enum name="eToomanyBelongDepartments"  value="8"/>
		<enum name="eParameterError"            value="9"/>
		<enum name="eUserExists"                value="10"/>
		<enum name="eNotFriend"                 value="11"/>
		<enum name="eGroupNotExist"             value="12"/>
		<enum name="eNotTopmost"                value="13"/>
		<enum name="eAlreadyIsFriend"           value="14"/>
		<enum name="eTooManyTopmost"            value="15"/>
		<enum name="eAcceptFromNotExist"        value="16"/>

		<!-- 好友列表用 Zeze.Collections.LinkedMap 下面时自定义数据结构的定义 -->
		<bean name="BFriend">
			<enum name="eNormal" value="0"/>
			<enum name="eInvite" value="1"/>
			<enum name="eDeny"   value="2"/>
			<enum name="eRemove" value="3"/>

			<variable id="1" name="Memo" type="string"/>
			<variable id="2" name="State" type="int"/>
		</bean>

		<!-- 协议：读取好友节点 -->
		<bean name="BPublicUserInfo">
			<variable id="1" name="Account"       type="string"/>
			<variable id="2" name="Nick"          type="string"/>
			<variable id="3" name="LastCertIndex" type="int"/>
			<variable id="4" name="Cert"          type="binary"/>
		</bean>
		<bean name="BPublicUserPhoto">
			<variable id="1" name="Account" type="string"/>
			<variable id="2" name="Photo"   type="binary"/>
		</bean>

		<rpc name="GetPublicUserInfo"  argument="Zege.User.BAccount" result="BPublicUserInfo" handle="server"/>
		<rpc name="GetPublicUserPhoto" argument="Zege.User.BAccount" result="BPublicUserPhoto" handle="server"/>

		<bean name="BAddFriend">
			<variable id="1" name="Account" type="string"/>
			<variable id="2" name="Memo" type="string"/>
		</bean>

		<rpc name="AddFriend" argument="BAddFriend" handle="server"/>
		<rpc name="AcceptFriend" argument="BAddFriend" handle="server"/>
		<rpc name="DenyFriend" argument="Zege.User.BAccount" handle="server"/>
		<rpc name="DeleteFriend" argument="Zege.User.BAccount" handle="server"/>

		<bean name="BSetTopmost">
			<variable id="1" name="Account" type="string"/>
			<variable id="2" name="Topmost" type="bool"/>
		</bean>
		<rpc name="SetTopmost" argument="BSetTopmost" handle="server"/>

		<bean name="BFriendNodeLogBean">
			<variable id="1" name="ChangeLog" type="binary"/>
		</bean>

		<protocol name="FriendNodeLogBeanNotify" argument="BFriendNodeLogBean" handle="client"/>

		<bean name="BGetFriendNodeArgument">
			<variable id="1" name="LinkedMapNameEndsWith" type="string"/> 参数是结束名，服务器构造完整的LinkedMap.Name。
			<variable id="2" name="NodeId" type="long"/>
		</bean>

		<bean name="BGetFriendNode">
			<variable id="1" name="NodeKey" type="Zeze.Builtin.Collections.LinkedMap.BLinkedMapNodeKey"/>
			<variable id="2" name="Node"    type="Zeze.Builtin.Collections.LinkedMap.BLinkedMapNode"/>
		</bean>

		<rpc name="GetFriendNode" argument="BGetFriendNodeArgument" result="BGetFriendNode" handle="server"/>

		<!-- 部门树用 Zeze.Collections.DepartmentTree 下面时自定义数据结构的定义 -->
		<bean name="BManager">
		</bean>

		<bean name="BGroupMember">
			<variable id="1" name="Nick" type="string"/>
			<variable id="2" name="BelongDepartments" type="set[long]"/>
		</bean>

		<bean name="BDepartmentMember">
			<variable id="1" name="Nick" type="string"/>
		</bean>

		<bean name="BGroupData">
		</bean>

		<bean name="BDepartmentData">
		</bean>

		<!-- 协议：群及部门管理 -->
		<bean name="BCreateGroup">
			<variable id="1" name="Members" type="set[string]"/>
		</bean>

		<bean name="BCreateGroupResult">
			<variable id="1" name="Group" type="string"/>
		</bean>

		<rpc name="CreateGroup" argument="BCreateGroup" result="BCreateGroupResult" handle="server"/>

		<bean name="BCreateDepartment">
			<variable id="1" name="Group" type="string"/>
			<variable id="2" name="DepartmentId" type="long"/>
			<variable id="3" name="Name" type="string"/>
		</bean>

		<rpc name="CreateDepartment" argument="BCreateDepartment" result="BDepartmentId" handle="server"/>

		<bean name="BDepartmentId">
			<variable id="1" name="Group" type="string"/>
			<variable id="2" name="DepartmentId" type="long"/>
		</bean>

		<rpc name="DeleteDepartment" argument="BDepartmentId" handle="server"/>

		<bean name="BDepartmentMove">
			<variable id="1" name="Group" type="string"/>
			<variable id="2" name="DepartmentId" type="long"/>
			<variable id="3" name="NewParent" type="long"/>
		</bean>
		<rpc name="MoveDepartment" argument="BDepartmentMove" handle="server"/>

		<bean name="BDepartmentNode">
			<variable id="1" name="ParentDepartment" type="long" /> 0表示第一级部门
			<variable id="2" name="Childs" type="map" key="string" value="long" /> name 2 id。采用整体保存，因为需要排序和重名判断。需要加数量上限。
			<variable id="3" name="Name" type="string" />
			<variable id="4" name="Managers" type="map[string,BManager]"/>
		</bean>
		<rpc name="GetDepartmentNode" argument="BDepartmentId" result="BDepartmentNode" handle="server"/>

		<bean name="BGroup">
			<variable id="1" name="Root" type="string" /> 群主
			<variable id="2" name="Managers" type="map[string,BManager]"/> 管理员
			<variable id="4" name="Childs" type="map" key="string" value="long" /> name 2 id。采用整体保存，因为需要排序和重名判断。需要加数量上限。
		</bean>
		<rpc name="GetGroupRoot" argument="BDepartmentId" result="BGroup" handle="server"/>

		<bean name="BGetMember">
			<variable id="1" name="Account" type="string"/>
			<variable id="2" name="Nick" type="string"/>
			<variable id="3" name="LastCertIndex" type="int"/>
			<variable id="4" name="Cert" type="binary"/>
		</bean>

		<bean name="BGetGroupMemberNode">
			<variable id="1" name="NodeId" type="long"/>
			<variable id="2" name="PrevNodeId" type="long"/>
			<variable id="3" name="NextNodeId" type="long"/>
			<variable id="4" name="Members"    type="list[BGetMember]"/>
		</bean>

		<!-- argument.DepartmentId 不需要设置，必须为0 -->
		<rpc name="GetGroupMemberNode" argument="BDepartmentNodeId" result="BGetGroupMemberNode" handle="server"/>

		<bean name="BGetDepartmentMember">
			<variable id="1" name="Account" type="string"/>
			<variable id="2" name="Nick" type="string"/>
			<variable id="3" name="LastCertIndex" type="int"/>
			<variable id="4" name="Cert" type="binary"/>
		</bean>

		<bean name="BGetDepartmentMemberNode">
			<variable id="1" name="NodeId" type="long"/>
			<variable id="2" name="PrevNodeId" type="long"/>
			<variable id="3" name="NextNodeId" type="long"/>
			<variable id="4" name="DepartmentMembers" type="list[BGetDepartmentMember]"/>
		</bean>

		<bean name="BDepartmentNodeId">
			<variable id="1" name="Group" type="string"/>
			<variable id="2" name="DepartmentId" type="long"/>
			<variable id="3" name="NodeId" type="long"/>
		</bean>

		<rpc name="GetDepartmentMemberNode" argument="BDepartmentNodeId" result="BGetDepartmentMemberNode" handle="server"/>

		<bean name="BAddDepartmentMember">
			<variable id="1" name="Group" type="string"/>
			<variable id="2" name="DepartmentId" type="long"/>
			<variable id="3" name="Account" type="string"/>
		</bean>
		<rpc name="AddDepartmentMember" argument="BAddDepartmentMember" handle="server"/>
		<rpc name="DelDepartmentMember" argument="BAddDepartmentMember" handle="server"/>

		<bean name="BAddManager">
			<variable id="1" name="Group" type="string"/>
			<variable id="2" name="DepartmentId" type="long"/>
			<variable id="3" name="Account" type="string"/>
			<variable id="4" name="Manager" type="BManager"/>
		</bean>
		<bean name="BDeleteManager">
			<variable id="1" name="Group" type="string"/>
			<variable id="2" name="DepartmentId" type="long"/>
			<variable id="3" name="Account" type="string"/>
		</bean>
		<rpc name="AddManager" argument="BAddManager" handle="server"/>
		<rpc name="DeleteManager" argument="BDeleteManager" handle="server"/>
	</module>

	<module name="Message" id="3">
		<enum name="eNotYourFriend"      value="1"/>
		<enum name="eGroupNotExist"      value="2"/>
		<enum name="eDepartmentNotExist" value="3"/>
		<enum name="eMessageRange"       value="4"/>
		<enum name="eTooManyMembers"     value="4"/>

		<bean name="BMessageRoot">
			<variable id="1" name="NextMessageId"  type="long" />
			<variable id="2" name="FirstMessageId" type="long" />
			多个客户端同时登录时，一个设置，其他得到已读通知。
			已读的条件是消息同步发送给客户端就算已读？
			<variable id="3" name="NextMessageIdNotRead" type="long" />
			<variable id="4" name="MessageTotalBytes" type="long" />
		</bean>

		<bean name="BSystemMessage">
			<variable id="1" name="Properties" type="map[string, string]"/>
		</bean>

		<bean name="BEmojiMessage">
			<enum name="eJpeg" value="1"/>
			<enum name="ePng"  value="2"/>
			<enum name="eGif"  value="3"/>

			<variable id="1" name="Type"  type="int" />
			<variable id="2" name="Image" type="binary" />
		</bean>

		<bean name="BTextMessage">
			<variable id="1" name="Properties" type="map[string, string]"/>
			<variable id="2" name="Message"    type="string"/>
		</bean>

		<bean name="BP2PMessage">
			<variable id="1" name="Addresses" type="list[string]"/> 发送者本地所有网络设备的IP地址。
			<variable id="2" name="ServerSee" type="string"/> 服务器看到的发送者的RemoteAddress。
			<variable id="3" name="Protocol" type="string"/> tcp or udp
			<variable id="4" name="Port" type="int"/> port
		</bean>

		<bean name="BMessage">
			<enum name="eTypeSystem" value="-1"/> 系统消息，不加密，SecureKeyIndex is -1;
			<enum name="eTypeP2P"    value="-2"/> P2P协商消息，不加密，服务器要参与协商；BP2PMessage
			<enum name="eTypeText"   value="0"/> 文本聊天消息，加密的，BTextMessage。
			<enum name="eTypeEmoji"  value="1"/> 自定义表情消息，加密的，解密出来是系列化的BEmojiMessage。

			<variable id="1" name="Type"           type="int" />
			<variable id="2" name="SecureKeyIndex" type="int" /> SecureKeyIndex 为 -1 表示不加密。
			<variable id="3" name="SecureMessage"  type="binary" /> eTypeSystem 时是未加密的。
			<variable id="4" name="From"           type="string" /> 发送用户，服务器填写
			<variable id="5" name="Group"          type="string" /> 群消息才填写，服务器填写，
			<variable id="6" name="DepartmentId"   type="long" /> 群消息才填写，服务器填写。
			<variable id="7" name="MessageId"      type="long" /> 服务器填写。简化读取消息时的数据结构定义。
		</bean>

		<!-- 好友消息历史 -->
		<beankey name="BFriendMessageKey">
			<variable id="1" name="Owner"     type="string" />
			<variable id="2" name="Friend"    type="string" />
			<variable id="3" name="MessageId" type="long" />
		</beankey>
		<beankey name="BFriendKey">
			<variable id="1" name="Owner" type="string" />
			<variable id="2" name="Friend" type="string" />
		</beankey>

		<table name="tFriendMessage" key="BFriendKey" value="BMessageRoot" />
		<table name="tFriendMessages" key="BFriendMessageKey" value="BMessage" />

		<!-- 群（部门）消息历史 -->
		<beankey name="BDepartmentKey">
			<variable id="1" name="Group" type="string" />
			<variable id="2" name="DepartmentId" type="long" />
		</beankey>
		<beankey name="BDepartmentMessageKey">
			<variable id="1" name="GroupDepartment" type="BDepartmentKey" /> 重用结构，节约内存
			<variable id="2" name="MessageId" type="long" />
		</beankey>
		<table name="tDepartementMessage" key="BDepartmentKey" value="BMessageRoot" />
		<table name="tDepartementMessages" key="BDepartmentMessageKey" value="BMessage" />

		<bean name="BSendMessage">
			<variable id="1" name="Friend" type="string" />
			<variable id="2" name="Message" type="BMessage" />
		</bean>

		<bean name="BSendMessageResult">
			<variable id="1" name="MessageId" type="long" />
		</bean>

		<!-- 发送消息。即时消息通知（电脑版？） -->
		<rpc name="SendMessage" argument="BSendMessage" result="BSendMessageResult" handle="server"/>

		<bean name="BSendDepartmentMessage">
			<variable id="1" name="Group" type="string" />
			<variable id="2" name="DepartmentId" type="long" />
			<variable id="3" name="Message" type="BMessage" />
		</bean>

		<bean name="BSendDepartmentMessageResult">
			<variable id="1" name="MessageId" type="long" />
		</bean>

		<rpc name="SendDepartmentMessage" argument="BSendDepartmentMessage" result="BSendDepartmentMessageResult" handle="server"/>

		<rpc name="NotifyMessage" argument="BMessage" handle="client"/>

		<enum name="eGetMessageFromAboutRead" value="-1" type="long" /> 从最后已读消息前面一点开始读取消息历史
		<enum name="eGetMessageFromAboutLast" value="-2" type="long" /> 从最后收到的消息前面一点开始读取消息历史
		<enum name="eGetMessageToAuto"        value="-1" type="long" /> 读取的最后一条消息自动控制。一般为From+20

		<!-- 消息浏览控制 -->
		<bean name="BGetFriendMessage">
			<variable id="1" name="Friend"        type="string" />
			<variable id="2" name="MessageIdFrom" type="long" default="-2"/> -1:(NextMessageIdHasRead-3) -2:(LastMessageId-20)
			<variable id="3" name="MessageIdTo"   type="long" default="-1"/> -1:auto
		</bean>

		<bean name="BGetMessageResult">
			<variable id="1" name="Messages"             type="list[BMessage]" />
			<variable id="2" name="ReachEnd"             type="bool" />
			<variable id="3" name="NextMessageIdNotRead" type="long" />
			<variable id="4" name="NextMessageId"        type="long" />
		</bean>

		<bean name="BSetFriendMessageHasRead">
			<variable id="1" name="Friend"            type="string" />
			<variable id="2" name="MessageIdHashRead" type="long" />
		</bean>

		<bean name="BSetGroupMessageHasRead">
			<variable id="1" name="GroupDepartment"   type="BDepartmentKey" />
			<variable id="2" name="MessageIdHashRead" type="long" />
		</bean>

		<bean name="BGetGroupMessage">
			<variable id="1" name="GroupDepartment" type="BDepartmentKey" />
			<variable id="2" name="MessageIdFrom"   type="long" /> eGetMessageFromAboutRead,eGetMessageFromAboutLast,>=0
			<variable id="3" name="MessageIdTo"     type="long" /> eGetMessageToAuto,>=0
		</bean>

		<rpc name="GetFriendMessage" argument="BGetFriendMessage" result="BGetMessageResult" handle="server"/>
		<rpc name="SetFriendMessageHasRead" argument="BSetFriendMessageHasRead" handle="server"/>

		<rpc name="GetGroupMessage"  argument="BGetGroupMessage" result="BGetMessageResult" handle="server"/>
		<rpc name="SetGroupMessageHasRead" argument="BSetGroupMessageHasRead" handle="server"/>
	</module>

	<!--
	通用通知模块。也可以叫任务模块，或者TODO模块。一开始叫Notify，就一直这么叫了吧。
	a) 特性
	   1. 数量不限（客户端翻页）。
	   2. 会过期（可选？）。
	   3. 有名字的，相同名字刷新排序位置，但还是同一个通知。
	b) 用途
	   1. 好友添加待定请求。
	-->
	<module name="Notify" id="4">
		<enum name="eNotifyNodeNotFound" value="1"/>

		<!-- 通知用 Zeze.Collections.LinkedMap 下面时自定义数据结构的定义 -->
		<bean name="BNotify">
			<enum name="eTypeAddFriend" value="0"/>

			<variable id="1" name="Title"      type="string"/> 显示标题
			<variable id="2" name="Type"       type="int"/> 通知类型（内部）
			<variable id="3" name="Properties" type="map[string, string]"/> 通知属性（由Name决定）
			<variable id="4" name="Data"       type="binary"/> 通知数据（由Name决定）
			<variable id="5" name="Expire"     type="long"/> 到期时间，默认 0， 表示永久。
		</bean>

		<!-- LogBean.FollowerApply -->
		<bean name="BNotifyNodeLogBean">
			<variable id="1" name="ChangeLog" type="binary"/>
		</bean>

		<protocol name="NotifyNodeLogBeanNotify" argument="BNotifyNodeLogBean" handle="client"/>

		<!-- Rpc -->
		<bean name="BGetNotifyNodeArgument">
			<variable id="1" name="NodeId" type="long"/>
		</bean>

		<bean name="BGetNotifyNode">
			<variable id="1" name="NodeKey" type="Zeze.Builtin.Collections.LinkedMap.BLinkedMapNodeKey"/>
			<variable id="2" name="Node"    type="Zeze.Builtin.Collections.LinkedMap.BLinkedMapNode"/>
		</bean>

		<rpc name="GetNotifyNode" argument="BGetNotifyNodeArgument" result="BGetNotifyNode" handle="server"/>
	</module>

	<project name="server" gendir="." scriptdir="src" platform="java" GenTables="">
		<!--
		这里引用的模块不该定义协议，定义了也不会被生成，一般为纯逻辑或者数据库模块。
		<module ref="CommonModule"/>
		-->
		<!-- service 生成到 solution 名字空间下 -->
		<service name="Server" handle="server,servlet" base="Zeze.Arch.ProviderService">
			<module ref="User"/>
			<module ref="Friend"/>
			<module ref="Message"/>
			<module ref="Notify"/>
		</service>

		<ModuleStartOrder>
		</ModuleStartOrder>

		<service name="ServerDirect" handle="server,client" base="Zeze.Arch.ProviderDirectService">
		</service>
	</project>

	<project name="client" gendir="." scriptdir="src" platform="java" BuiltinNG="true">
		<service name="ClientService" handle="client" base="Zeze.Services.HandshakeClient">
			<module ref="Zeze.Builtin.Online"/>
			<module ref="Zeze.Builtin.LinkdBase"/>
			<module ref="Zege.Linkd"/>
			<module ref="Friend"/>
			<module ref="Message"/>
			<module ref="User"/>
		</service>
	</project>

	<project name="Zege" gendir="../.." platform="conf+cs+net">
		<service name="ClientService" handle="client" base="Zeze.Services.HandshakeClient">
			<module ref="Zeze.Builtin.Online"/>
			<module ref="Zeze.Builtin.LinkdBase"/>
			<module ref="Zege.Linkd"/>
			<module ref="Friend"/>
			<module ref="Message"/>
			<module ref="User"/>
			<module ref="Notify"/>
		</service>
		<FollowerApplyTables>
			<table name="Zeze.Builtin.Collections.LinkedMap.tLinkedMapNodes"/>
			<bean ref="Zege.Notify.BNotify"/>
			<bean ref="Zege.Friend.BFriend"/>
		</FollowerApplyTables>
	</project>

</solution>
