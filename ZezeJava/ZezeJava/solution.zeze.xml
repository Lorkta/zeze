<?xml version="1.0" encoding="utf-8"?>

<solution name="Zeze" ModuleIdAllowRanges="11000-11999">
	<external bean="Zeze.Arch.Beans.BSend"/>
	<external bean="Zeze.Arch.Beans.BSendResult"/>

	<external bean="Zeze.Services.ServiceManager.BAllocateIdArgument"/>
	<external bean="Zeze.Services.ServiceManager.BAllocateIdResult"/>
	<external bean="Zeze.Services.ServiceManager.BOfflineNotify"/>
	<external bean="Zeze.Services.ServiceManager.BServerLoad"/>
	<external bean="Zeze.Services.ServiceManager.BServiceInfo"/>
	<external bean="Zeze.Services.ServiceManager.BServiceInfos"/>
	<external bean="Zeze.Services.ServiceManager.BServiceListVersion"/>
	<external bean="Zeze.Services.ServiceManager.BSubscribeInfo"/>

	<module name="Builtin" id="11000">
		<!-- Global With Raft 模块 -->
		<module name="GlobalCacheManagerWithRaft" id="11001" DefaultTransactionLevel="None">
			<!-- table -->
			<bean name="BCacheState" kind="rocks">
				<variable id="1" name="AcquireStatePending" type="int" transient="true"/>
				<variable id="2" name="Modify" type="int" default="-1"/> ServerId, default MUST BE -1.
				<variable id="3" name="Share" type="set" value="int"/>
			</bean>

			<bean name="BAcquiredState" kind="rocks">
				<variable id="1" name="State" type="int"/>
			</bean>

			<table name="Global" key="binary" value="BCacheState" kind="rocks" />
			<table name="Session" key="binary" value="BAcquiredState" kind="rocks" />

			<!-- rpc -->
			<bean name="BAcquireParam">
				<variable id="1" name="GlobalKey" type="binary"/>
				<variable id="2" name="State" type="int"/>
			</bean>

			<bean name="BReduceParam">
				<variable id="1" name="GlobalKey" type="binary"/>
				<variable id="2" name="State" type="int"/>
			</bean>

			<bean name="BLoginParam">
				<variable id="1" name="ServerId" type="int"/>
				<variable id="2" name="GlobalCacheManagerHashIndex" type="int"/>
				<variable id="3" name="DebugMode" type="bool"/> 调试模式下不检查Release Timeout,方便单步调试
			</bean>

			<bean name="BAchillesHeel">
				<variable id="1" name="ServerId" type="int"/>
				<variable id="2" name="SecureKey" type="string"/>
				<variable id="3" name="GlobalCacheManagerHashIndex" type="int"/>
			</bean>

			<bean name="BAchillesHeelConfig">
				<variable id="1" name="MaxNetPing" type="int"/>
				<variable id="2" name="ServerProcessTime" type="int"/>
				<variable id="3" name="ServerReleaseTimeout" type="int"/>
			</bean>

			<rpc name="Acquire" argument="BAcquireParam" result="BReduceParam" base="Zeze.Raft.RaftRpc" handle="server" />
			<rpc name="Reduce" argument="BReduceParam" result="BReduceParam" base="Zeze.Raft.RaftRpc" handle="client" />
			<rpc name="Login" argument="BLoginParam" result="BAchillesHeelConfig" base="Zeze.Raft.RaftRpc" handle="server" />
			<rpc name="ReLogin" argument="BLoginParam" base="Zeze.Raft.RaftRpc" handle="server" />
			<rpc name="NormalClose" handle="server" base="Zeze.Raft.RaftRpc" />
			<rpc name="Cleanup" argument="BAchillesHeel" base="Zeze.Raft.RaftRpc" handle="server" />
			<rpc name="KeepAlive" base="Zeze.Raft.RaftRpc" handle="server" />
		</module>

		<!-- Rocks 测试模块 -->
		<module name="TestRocks" id="11002">
			<beankey name="BeanKey">
				<variable id="1" name="Id" type="int"/>
				<variable id="2" name="Name" type="string"/>
			</beankey>

			<bean name="BValue" kind="rocks">
				<variable id="1" name="Int" type="int"/>
				<variable id="2" name="Bool" type="bool"/>
				<variable id="3" name="Float" type="float"/>
				<variable id="4" name="double" type="double"/>
				<variable id="5" name="String" type="string"/>
				<variable id="6" name="Binary" type="binary"/>
				<variable id="7" name="SetInt" type="set" value="int"/>
				<variable id="8" name="SetBeankey" type="set" value="BeanKey"/>
				<variable id="9" name="MapInt" type="map" key="int" value="int"/>
				<variable id="10" name="MapBean" type="map" key="int" value="BValue"/>
				<variable id="11" name="Beankey" type="BeanKey"/>
			</bean>

			<table name="tRocks" key="int" value="BValue" kind="rocks"/>
		</module>

		<!-- 应用内部唯一ID生成器，仅支持long类型。-->
		<module name="AutoKeyOld" id="11003">
			<beankey name="BSeedKey">
				<variable id="1" name="ServerId" type="int"/>
				<variable id="2" name="KeyName"  type="string"/>
			</beankey>
			<bean name="BAutoKey">
				<variable id="1" name="NextId" type="long"/>
			</bean>
			<table name="tAutoKeys" key="BSeedKey" value="BAutoKey" />
		</module>

		<module name="Collections" id="11004">
			<!-- 一个简单的大容量Map，同时所有的分段节点按双向链表组织起来。新增节点放到链表尾部 -->
			<module name="LinkedMap" id="11005">
				<bean name="BLinkedMap">
					<variable id="1" name="HeadNodeId" type="long" />
					<variable id="2" name="TailNodeId" type="long" />
					<variable id="3" name="Count" type="long" />
					<variable id="4" name="LastNodeId" type="long" /> 最近分配过的NodeId, 用于下次分配
				</bean>
				<table name="tLinkedMaps" key="string" value="BLinkedMap" /> key: LinkedMap的Name

				<beankey name="BLinkedMapKey">
					<variable id="1" name="Name" type="string" /> LinkedMap的Name
					<variable id="2" name="ValueId" type="string" /> LinkedMap的Key转成字符串类型
				</beankey>
				<bean name="BLinkedMapNodeId">
					<variable id="1" name="NodeId" type="long" /> KeyValue对所属的节点ID. 每个节点有多个KeyValue对共享
				</bean>
				<table name="tValueIdToNodeId" key="BLinkedMapKey" value="BLinkedMapNodeId" />

				<bean name="BLinkedMapNodeValue">
					<variable id="1" name="Id" type="string" /> LinkedMap的Key转成字符串类型
					<variable id="2" name="Value" type="dynamic">
						<GetSpecialTypeIdFromBean value="Zeze.Collections.LinkedMap::getSpecialTypeIdFromBean"/>
						<CreateBeanFromSpecialTypeId value="Zeze.Collections.LinkedMap::createBeanFromSpecialTypeId"/>
					</variable>
				</bean>
				<beankey name="BLinkedMapNodeKey">
					<variable id="1" name="Name" type="string" /> LinkedMap的Name
					<variable id="2" name="NodeId" type="long" />
				</beankey>
				<bean name="BLinkedMapNode"> 一个节点可以存多个KeyValue对，
					<variable id="1" name="PrevNodeId" type="long" /> 前一个节点ID. 0表示已到达开头。
					<variable id="2" name="NextNodeId" type="long" /> 后一个节点ID. 0表示已到达结尾。
					<variable id="3" name="Values" type="list" value="BLinkedMapNodeValue" /> 多个KeyValue对,容量由LinkedMap构造时的nodeSize决定
				</bean>
				<table name="tLinkedMapNodes" key="BLinkedMapNodeKey" value="BLinkedMapNode"/>

				<bean name="BClearJobState">
					<variable id="1" name="HeadNodeId" type="long" />
					<variable id="2" name="TailNodeId" type="long" />
					<variable id="3" name="LinkedMapName" type="string" />
				</bean>
			</module>

			<!-- 一个简单的大容量单向链表，可按Stack方式使用 -->
			<module name="Queue" id="11006">
				<!--
				1. 单向链表。2. Value没有索引。3. 每个Value记录加入的时间。4. 只能从Head提取，从Tail添加。5. 用作Stack时也可以从Head添加。
				链表结构: (NewStackNode -＞) Head -＞ ... -＞ Tail (-＞ NewQueueNode)。
				第一个用户是Table.GC，延迟删除记录。
				-->
				<bean name="BQueue">
					<variable id="1" name="HeadNodeId" type="long" />
					<variable id="2" name="TailNodeId" type="long" />
					<variable id="3" name="Count" type="long" />
					<variable id="4" name="LastNodeId" type="long" /> 最近分配过的NodeId, 用于下次分配
				</bean>
				<table name="tQueues" key="string" value="BQueue" /> key: Queue的Name

				<bean name="BQueueNodeValue">
					<variable id="1" name="Timestamp" type="long" />
					<variable id="2" name="Value" type="dynamic">
						<GetSpecialTypeIdFromBean value="Zeze.Collections.Queue::getSpecialTypeIdFromBean"/>
						<CreateBeanFromSpecialTypeId value="Zeze.Collections.Queue::createBeanFromSpecialTypeId"/>
					</variable>
				</bean>
				<beankey name="BQueueNodeKey">
					<variable id="1" name="Name" type="string" /> LinkedMap的Name
					<variable id="2" name="NodeId" type="long" />
				</beankey>
				<bean name="BQueueNode"> 一个节点可以存多个KeyValue对，
					<variable id="1" name="NextNodeId" type="long" /> 后一个节点ID. 0表示已到达结尾。
					<variable id="2" name="Values" type="list" value="BQueueNodeValue" />
				</bean>
				<table name="tQueueNodes" key="BQueueNodeKey" value="BQueueNode"/>
			</module>

			<!-- 有向无环图 -->
			<module name="DAG" id="11017">
				<bean name="BDAG">
					<variable id="1" name="NodeSum" type="long" /> 有向图的结点数
					<variable id="2" name="EdgeSum" type="long" /> 有向图的边数
					<variable id="3" name="StartNode" type="string" /> 有向图的起点ValueId（如果有的话），没有则置空（一般来说，对于任务Task都有起点与终点）
					<variable id="4" name="EndNode" type="string" /> 有向图的终点（如果有的话），没有则置空（一般来说，对于任务Task都有起点与终点）
				</bean>
				<table name="tDAGs" key="string" value="BDAG" /> Key: 有向图自己的名字

				<beankey name="BDAGNodeKey"> 有向图的结点Key
					<variable id="1" name="Name" type="string" /> 有向图自己的名字
					<variable id="2" name="ValueId" type="string" /> 有向图结点的Key转成字符串类型（如：任务的id）
				</beankey>
				<bean name="BDAGNode"> 有向图的结点类型（如：一个任务Task）
					<variable id="1" name="Value" type="dynamic">
						<GetSpecialTypeIdFromBean value="Zeze.Collections.DAG::getSpecialTypeIdFromBean"/>
						<CreateBeanFromSpecialTypeId value="Zeze.Collections.DAG::createBeanFromSpecialTypeId"/>
					</variable>
				</bean>
				<table name="tNode" key="BDAGNodeKey" value="BDAGNode" /> Table: 有向图节点表

				<beankey name="BDAGEdgeKey"> 有向图的边Key
					<variable id="1" name="Name" type="string" /> 有向图的自己的名字
					<variable id="2" name="ValueId" type="string" /> 有向图边的Key转成字符串类型
				</beankey>
				<bean name="BDAGEdge"> 有向图的边类型（如：任务的连接方式）
					<variable id="1" name="From" type="BDAGNodeKey" /> 有向图中有向边的起点
					<variable id="2" name="To" type="BDAGNodeKey" /> 有向图中有向边的终点
				</bean>
				<table name="tEdge" key="BDAGEdgeKey" value="BDAGEdge" /> Table: 有向图边表
			</module> DAG 11017

			<!-- 部门树-->
			<module name="DepartmentTree" id="11101">
				<enum name="ErrorChangeRootNotOwner" value="1"/>
				<enum name="ErrorDepartmentDuplicate" value="2"/>
				<enum name="ErrorDepartmentNotExist" value="3"/>
				<enum name="ErrorDeleteDepartmentRemainChilds" value="4"/>
				<enum name="ErrorDepartmentSameParent" value="5"/>
				<enum name="ErrorCanNotMoveToChilds" value="6"/>
				<enum name="ErrorDepartmentParentNotExist" value="7"/>
				<enum name="ErrorManagePermission" value="8"/>
				<enum name="ErrorTooManyChildren" value="9"/>

				<bean name="BDepartmentRoot">
					<variable id="1" name="Root" type="string" /> 群主
					<variable id="2" name="Managers" type="map[string,dynamic]"> 管理员
						<GetSpecialTypeIdFromBean value="Zeze.Collections.DepartmentTree::getSpecialTypeIdFromBean"/>
						<CreateBeanFromSpecialTypeId value="Zeze.Collections.DepartmentTree::createBeanFromSpecialTypeId"/>
					</variable>
					<variable id="3" name="NextDepartmentId" type="long" /> 部门Id种子
					<variable id="4" name="Childs" type="map" key="string" value="long" /> name 2 id。采用整体保存，因为需要排序和重名判断。需要加数量上限。
					<variable id="5" name="Data" type="dynamic">
						<GetSpecialTypeIdFromBean value="Zeze.Collections.DepartmentTree::getSpecialTypeIdFromBean"/>
						<CreateBeanFromSpecialTypeId value="Zeze.Collections.DepartmentTree::createBeanFromSpecialTypeId"/>
					</variable>
				</bean>

				<table name="tDepartment" key="string" value="BDepartmentRoot" /> 群部门树根。普通用户也可以创建部门。暂不开放这个给个人。

				<bean name="BDepartmentTreeNode">
					<variable id="1" name="ParentDepartment" type="long" /> 0表示第一级部门
					<variable id="2" name="Childs" type="map" key="string" value="long" /> name 2 id。采用整体保存，因为需要排序和重名判断。需要加数量上限。
					<variable id="3" name="Name" type="string" />
					<variable id="4" name="Managers" type="map[string,dynamic]">
						<GetSpecialTypeIdFromBean value="Zeze.Collections.DepartmentTree::getSpecialTypeIdFromBean"/>
						<CreateBeanFromSpecialTypeId value="Zeze.Collections.DepartmentTree::createBeanFromSpecialTypeId"/>
					</variable>
					<variable id="5" name="Data" type="dynamic">
						<GetSpecialTypeIdFromBean value="Zeze.Collections.DepartmentTree::getSpecialTypeIdFromBean"/>
						<CreateBeanFromSpecialTypeId value="Zeze.Collections.DepartmentTree::createBeanFromSpecialTypeId"/>
					</variable>
				</bean>

				<beankey name="BDepartmentKey">
					<variable id="1" name="Owner" type="string" />
					<variable id="2" name="DepartmentId" type="long" />
				</beankey>

				<table name="tDepartmentTree" key="BDepartmentKey" value="BDepartmentTreeNode" />
			</module>
		</module>

		<!--
		延迟从Table中删除记录。比如：记录被登记到这个模块7天以后才会被真正删除。
		-->
		<module name="DelayRemove" id="11007">
			<bean name="BTableKey">
				<variable id="1" name="TableName" type="string" />
				<variable id="2" name="EncodedKey" type="binary" />
				<variable id="3" name="EnqueueTime" type="long" />
			</bean>
			<bean name="BJob">
				<variable id="1" name="JobHandleName" type="string" />
				<variable id="2" name="JobState" type="binary" />
			</bean>
			<bean name="BJobs">
				<variable id="1" name="Jobs" type="map[string, BJob]" />
			</bean>
			<table name="tJobs" key="int" value="BJobs" />
		</module>

		<!--
		Linkd - Server 之间通讯的协议定义。
		-->
		<module name="Provider" id="11008">
			<!-- gs to link -->
			<bean name="BModule">
				<!-- ChoiceType -->
				<enum name="ChoiceTypeDefault"     value="0"/> choice by load
				<enum name="ChoiceTypeHashAccount" value="1"/>
				<enum name="ChoiceTypeHashRoleId"  value="2"/>
				<enum name="ChoiceTypeFeedFullOneByOne" value="3"/>
				<enum name="ChoiceTypeHashSourceAddress" value="4"/>

				<variable name="ChoiceType" id="1" type="int"/>

				<!-- ConfigType 目前没有实际逻辑需要这个类型，根据模块绑定配置文件生成类型 -->
				<enum name="ConfigTypeDefault" value="0"/>
				<enum name="ConfigTypeSpecial" value="1"/>
				<enum name="ConfigTypeDynamic" value="2"/>

				<variable name="ConfigType" id="2" type="int"/>

				<!-- SubscribeType
				定义于： Zeze.Services.ServiceManager.BSubscribeInfo.
				静态绑定忽略这个参数，总是使用Zeze.Services.ServiceManager.SubscribeInfo.SubscribeTypeReadyCommit.
				-->
				<variable name="SubscribeType" id="3" type="int"/>
			</bean>

			<bean name="BBind">
				<variable name="modules" id="1" type="map" key="int" value="BModule"/> moduleId -> BModule
				<!--
				模式一，静态绑定，用于启用cache同步的多个gs（gameserver）。
				此时 lindSids 为空。同一个moduleId可以绑定多个内部服务。客户端第一次访问时，随便选择一个内部服务，以后都用这个。
				模式二，动态绑定，用于地图服务器，玩家只能在一个地图服务器上，进入退出地图时绑定。
				lindSids 指定临时绑定该客户端连接到此服务。这个功能可能不需要，保留。
				*** 同一个moduleId不能既是静态绑定又是动态绑定。
				-->
				<variable name="linkSids" id="2" type="set" value="long"/>

				<enum name="ResultSuccess" value="0"/>
				<enum name="ResultFailed"  value="1"/>
			</bean>

			<rpc name="Bind"   argument="BBind" handle="client"/>
			<rpc name="UnBind" argument="BBind" handle="client"/>

			<bean name="BSubscribe">
				<variable name="modules" id="1" type="map" key="int" value="BModule"/> moduleId -> BModule
			</bean>

			<rpc name="Subscribe" argument="BSubscribe" handle="client"/> 通知linkd订阅模块的服务列表。

			<bean name="BKick">
				<enum name="ErrorProtocolUnknown"   value="1"/>
				<enum name="ErrorDecode"            value="2"/>
				<enum name="ErrorProtocolException" value="3"/>
				<enum name="ErrorDuplicateLogin"    value="4"/>
				<enum name="ErrorSeeDescription"    value="5"/>
				<enum name="ErrorOnlineSetName"     value="6"/>

				<variable name="linksid" id="1" type="long"/>
				<variable name="code"    id="2" type="int"/>
				<variable name="desc"    id="3" type="string"/> // for debug
			</bean>

			<protocol name="Kick" argument="BKick" handle="client"/>

			<bean name="BSend" extendable="true">
				<variable name="linkSids"     id="1" type="list" value="long"/>
				<variable name="protocolType" id="2" type="long"/>
				<variable name="protocolWholeData" id="3" type="binary"/> 完整的协议打包，包括了 type, size
			</bean>

			<bean name="BSendResult">
				<variable name="ErrorLinkSids" id="1" type="list" value="long"/>
			</bean>

			<rpc name="Send" argument="Zeze.Arch.Beans.BSend" result="Zeze.Arch.Beans.BSendResult" handle="client"/>

			<bean name="BBroadcast">
				<variable name="protocolType"      id="1" type="long"/>
				<variable name="protocolWholeData" id="2" type="binary"/> 完整的协议打包，包括了 type, size
				<variable name="time"              id="3" type="int"/>
			</bean>

			<protocol name="Broadcast" argument="BBroadcast" handle="client"/>

			<bean name="BUserState">
				<variable name="context"  id="1" type="string"/>
				<variable name="contextx" id="2" type="binary"/>
				<variable name="onlineSetName"  id="3" type="string"/>
			</bean>

			<bean name="BSetUserState">
				<variable name="linkSid"  id="1" type="long"/>
				<variable name="userState"  id="2" type="BUserState"/>
			</bean>

			<protocol name="SetUserState" argument="BSetUserState" handle="client"/>

			<bean name="BLoad">
				<enum name="eWorkFine"  value="0"/>
				<enum name="eThreshold" value="1"/>
				<enum name="eOverload"  value="2"/>

				<variable name="Online"           id="1" type="int"/> 用户数量
				<variable name="ProposeMaxOnline" id="2" type="int"/> 建议最大用户数量
				<variable name="OnlineNew"        id="3" type="int"/> 最近上线用户数量，一般是一秒内的。用来防止短时间内给同一个gs分配太多用户。
				<variable name="Overload"         id="4" type="int"/> 过载保护类型。参见上面的枚举定义。
			</bean>

			<!-- link to gs -->
			<bean name="BDispatch">
				<variable name="linkSid"                id="1" type="long"/>
				<variable name="account"              id="2" type="string"/>
				<variable name="protocolType"     id="3" type="long"/>
				<variable name="protocolData"     id="4" type="binary"/> 协议打包，不包括 type, size
				<variable name="context"              id="5" type="string"/> SetUserState
				<variable name="contextx"            id="6" type="binary"/> SetUserState
				<variable name="onlineSetName" id="7" type="string"/> SetUserState
			</bean>
			<protocol name="Dispatch" argument="BDispatch" handle="server"/>

			<bean name="BLinkBroken">
				<enum name="REASON_PEERCLOSE" value="0"/>

				<variable name="account" id="1" type="string"/>
				<variable name="linkSid" id="2" type="long"/>
				<variable name="reason"  id="3" type="int"/>

				<variable name="userState"  id="4" type="BUserState"/>
			</bean>

			<protocol name="LinkBroken" argument="BLinkBroken" handle="server"/>

			<bean name="BAnnounceLinkInfo">
				Linkd，Provider之间连接建立以后，通告自己的信息。保留。
			</bean>
			<protocol name="AnnounceLinkInfo" NoProcedure="true" argument="BAnnounceLinkInfo" handle="server"/>

			<!-- gs to link -->
			<bean name="BAnnounceProviderInfo">
				<variable name="ServiceNamePrefix"  id="1" type="string"/>
				<variable name="ServiceIndentity"   id="2" type="string"/>
				<variable name="ProviderDirectIp"   id="3" type="string"/>
				<variable name="ProviderDirectPort" id="4" type="int"/>
			</bean>

			<protocol name="AnnounceProviderInfo" NoProcedure="true" argument="BAnnounceProviderInfo" handle="client"/>
		</module>

		<!-- gs 之间直连的服务: 即时客户端也是服务器 -->
		<module name="ProviderDirect" id="11009">
			<enum name="ErrorTransmitParameterFactoryNotFound" value="1" />

			<bean name="BModuleRedirectArgument">
				<variable name="ModuleId"     id="1" type="int"/>
				<variable name="HashCode"     id="2" type="int"/> server 计算。see BBind.ChoiceType。
				<variable name="RedirectType" id="3" type="int"/> 如果是ToServer，ServerId存在HashCode中。

				<variable name="MethodFullName" id="4" type="string"/> format="ModuleFullName:MethodName"
				<variable name="Params"         id="5" type="binary"/>

				<variable name="ServiceNamePrefix" id="6" type="string"/>
			</bean>

			<bean name="BModuleRedirectResult">
				<variable name="ModuleId" id="1" type="int"/>
				<variable name="ServerId" id="2" type="int"/> 目标server的id。
				<!-- 上面两个参数用来调试，不是必要的。 -->

				<!--
				rpc.ResultCode == ResultCodeSuccess 时，才使用下面两个变量，此时表示rpc调用流程正确了。
				处理结果是否正确，还需要进一步查看 ReturnCode。
				-->
				<variable name="Params" id="3" type="binary"/>
			</bean>

			<!-- 转发只定义一个rpc，以后可能需要实现server之间的直连，不再通过转发 -->
			<rpc name="ModuleRedirect" argument="BModuleRedirectArgument" result="BModuleRedirectResult" handle="server">
				<enum name="RedirectTypeWithHash" value="0"/>
				<enum name="RedirectTypeToServer" value="1"/>

				<enum name="ResultCodeSuccess" value="0"/>
				<enum name="ResultCodeMethodFullNameNotFound" value="1"/>
				<enum name="ResultCodeHandleException" value="2"/>
				<enum name="ResultCodeHandleError" value="3"/>

				<enum name="ResultCodeLinkdTimeout"    value="10"/>
				<enum name="ResultCodeLinkdNoProvider" value="11"/>
				<enum name="ResultCodeRequestTimeout"  value="12"/>
			</rpc>

			<bean name="BModuleRedirectAllRequest">
				<variable name="ModuleId"                id="1" type="int"/>
				<variable name="HashCodeConcurrentLevel" id="2" type="int"/> 总的并发分组数量
				<variable name="HashCodes"               id="3" type="set" value="int"/> 发送给具体进程时需要处理的分组hash-index（目前由linkd填写）
				<variable name="SourceProvider"          id="4" type="long"/> linkd 转发的时候填写本地provider的sessionId。
				<variable name="SessionId"               id="5" type="long"/> 发起请求者初始化，返回结果时带回。

				<variable name="MethodFullName"          id="6" type="string"/> format="ModuleFullName:MethodName"
				<variable name="Params"                  id="7" type="binary"/>

				<variable name="ServiceNamePrefix"       id="8" type="string"/>
			</bean>

			<bean name="BModuleRedirectAllHash">
				<variable name="ReturnCode" id="1" type="long"/>
				<variable name="Params"     id="2" type="binary"/>
			</bean>

			<bean name="BModuleRedirectAllResult">
				<variable name="ModuleId"       id="1" type="int"/>
				<variable name="ServerId"       id="2" type="int"/> 目标server的id。
				<!-- 上面两个参数用来调试，不是必要的。 -->
				<variable name="SourceProvider" id="3" type="long"/> 从BModuleRedirectAllRequest里面得到。
				<variable name="MethodFullName" id="4" type="string"/> format="ModuleFullName:MethodName"
				<variable name="SessionId"      id="5" type="long"/> 发起请求者初始化，返回结果时带回。
				<!--
				ResultCode == ResultCodeSuccess 时，才使用下面变量的Value，此时表示调用流程正确了。
				处理结果是否正确，还需要进一步查看Value.ReturnCode。
				-->
				<variable name="Hashs"          id="6" type="map" key="int" value="BModuleRedirectAllHash"/> 发送给具体进程时需要处理的分组hash-index（目前由linkd填写）
			</bean>

			<!-- 使用protocol而不是rpc，是为了可以按分组返回结果，当然现在定义支持一个结果里面包含多个分组结果 -->
			<protocol name="ModuleRedirectAllRequest" argument="BModuleRedirectAllRequest" handle="server"/>
			<protocol name="ModuleRedirectAllResult" argument="BModuleRedirectAllResult" handle="server"/>

			<bean name="BTransmit">
				<variable name="ActionName" id="1" type="string"/>
				<variable name="Roles"      id="2" type="set" value="long"/> 查询目标角色。
				<variable name="Sender"     id="3" type="long"/> 结果发送给Sender。
				<variable name="Parameter"  id="4" type="binary"/> encoded bean
				<variable name="OnlineSetName"  id="5" type="string"/>
			</bean>

			<protocol name="Transmit" argument="BTransmit" NoProcedure="true" handle="server"/> 默认不启用事务，由协议实现自己控制。

			<bean name="BTransmitAccount">
				<variable name="ActionName"     id="1" type="string"/>
				<variable name="Parameter"      id="2" type="binary"/> encoded bean
				<variable name="TargetAccounts" id="3" type="set" value="string"/> 查询目标角色。
				<variable name="SenderAccount"  id="4" type="string"/> 结果发送给Sender。
				<variable name="SenderClientId" id="5" type="string"/> 结果发送给Sender。
			</bean>

			<protocol name="TransmitAccount" argument="BTransmitAccount" NoProcedure="true" handle="server"/> 默认不启用事务，由协议实现自己控制。

			<bean name="BProviderInfo">
				<variable name="Ip"       id="1" type="string"/>
				<variable name="Port"     id="2" type="int"/>
				<variable name="ServerId" id="3" type="int"/>
			</bean>

			<rpc name="AnnounceProviderInfo" argument="BProviderInfo" handle="server,client"/>
		</module>

		<module name="RedoQueue" id="11010">
			<bean name="BQueueTask">
				<variable name="QueueName"  id="1" type="string"/> 队列名称。
				<variable name="TaskType"   id="2" type="int"/> 任务类型。
				<variable name="TaskId"     id="3" type="long"/> 任务编号，必须递增。
				<variable name="TaskParam"  id="4" type="binary"/> 任务参数。
				<variable name="PrevTaskId" id="5" type="long"/> 上一个任务编号，用来发现错误。
			</bean>

			<rpc name="RunTask" argument="BQueueTask" result="BTaskId" handle="server"/>

			<bean name="BTaskId">
				<variable name="TaskId" id="1" type="long"/>
			</bean>

			<table name="tQueueLastTaskId" key="string" value="BTaskId" />
		</module>

		<module name="LinkdBase" id="11011">
			<!-- linkd to client -->
			<bean name="BReportError">
				<enum name="FromLink"     value="0"/>
				<enum name="FromProvider" value="1"/>

				<enum name="CodeMuteKick"     value="0"/> 只断客户端连接，不发送消息给客户端，用于重连时确保旧的连接快速断开
				<enum name="CodeNotAuthed"    value="1"/>
				<enum name="CodeNoProvider"   value="2"/>
				<enum name="CodeProviderBusy" value="3"/>

				<variable id="1" name="from" type="int"/>
				<variable id="2" name="code" type="int"/>
				<variable id="3" name="desc" type="string"/>
			</bean>

			<protocol name="ReportError" argument="BReportError" handle="client"/>
		</module>

		<module name="Game" id="11012">
			<module name="Online" id="11013" MultiInstance="true">
				<enum value="0" name="ResultCodeSuccess"/>
				<enum value="1" name="ResultCodeCreateRoleDuplicateRoleName"/>
				<enum value="2" name="ResultCodeAccountNotExist"/>
				<enum value="3" name="ResultCodeRoleNotExist"/>
				<enum value="4" name="ResultCodeNotLastLoginRoleId"/>
				<enum value="5" name="ResultCodeOnlineDataNotFound"/>
				<enum value="6" name="ResultCodeReliableNotifyConfirmIndexOutOfRange"/>
				<enum value="7" name="ResultCodeNotLogin"/>

				<enum value="0" name="eOffline"/>
				<enum value="1" name="eLinkBroken"/>
				<enum value="2" name="eLogined"/>

				<!-- protocols -->
				<bean name="BLogin">
					<variable id="1" name="RoleId" type="long"/>
					<variable id="2" name="OnlineSetName" type="string"/>
				</bean>
				<bean name="BReLogin">
					<variable id="1" name="RoleId" type="long"/>
					<variable id="2" name="ReliableNotifyConfirmIndex" type="long"/>
					<variable id="3" name="OnlineSetName" type="string"/>
				</bean>
				<bean name="BReliableNotifyConfirm">
					<variable id="1" name="ReliableNotifyConfirmIndex" type="long"/>
					<variable id="2" name="Sync" type="bool"/>
				</bean>
				<bean name="BReliableNotify">
					<variable id="1" name="Notifies" type="list" value="binary"/> full encoded protocol list
					<variable id="2" name="ReliableNotifyIndex" type="long"/> Notify的计数开始。客户端收到的总计数为：start + Notifies.Count
				</bean>

				<rpc name="Login"   argument="BLogin"   handle="server"/> 登录角色
				<rpc name="ReLogin" argument="BReLogin" handle="server"/> 网络断开重新登录（数据无法同步时会失败，此时客户端应该重新走完整的登录流程-装载数据。）
				<rpc name="Logout" handle="server"/> 登出
				<rpc name="ReliableNotifyConfirm" argument="BReliableNotifyConfirm" handle="server"/>
				<protocol name="SReliableNotify" argument="BReliableNotify" handle="client"/>

				<bean name="BDelayLogoutCustom">
					<variable id="1" name="RoleId" type="long"/>
					<variable id="2" name="LoginVersion" type="long"/>
					<variable id="3" name="OnlineSetName" type="string"/>
				</bean>
				<!-- tables -->
				<bean name="BOnline">
					<variable id="3" name="Link"  type="BLink"/>
					<variable id="4" name="LoginVersion" type="long"/>
					<variable id="5" name="ReliableNotifyMark"         type="set" value="string"/>
					<variable id="6" name="ReliableNotifyConfirmIndex" type="long"/>
					<variable id="7" name="ReliableNotifyIndex"        type="long"/>
					<variable id="8" name="ServerId" type="int"/>
					<variable id="9" name="LogoutVersion" type="long"/>
					<variable id="10" name="UserData" type="dynamic">
						<GetSpecialTypeIdFromBean value="Zeze.Game.Online::getSpecialTypeIdFromBean"/>
						<CreateBeanFromSpecialTypeId value="Zeze.Game.Online::createBeanFromSpecialTypeId"/>
					</variable>
				</bean>
				<beankey name="BLink">
					<variable id="1" name="LinkName" type="string"/>
					<variable id="2" name="LinkSid"  type="long"/>
					<variable id="3" name="State" type="int"/>
				</beankey>

				<bean name="BNotify">
					<variable id="1" name="FullEncodedProtocol" type="binary"/>
				</bean>

				<!-- tables -->
				<table name="tonline" key="long" value="BOnline"/>

				<bean name="BAny">
					<variable id="1" name="Any" type="dynamic">
						<GetSpecialTypeIdFromBean value="Zeze.Game.Online::getSpecialTypeIdFromBean"/>
						<CreateBeanFromSpecialTypeId value="Zeze.Game.Online::createBeanFromSpecialTypeId"/>
					</variable>
				</bean>

				<bean name="BLocal">
					<variable id="1" name="LoginVersion" type="long"/>
					<variable id="2" name="Datas" type="map" key="string" value="BAny"/>
				</bean>

				<table name="tlocal" key="long" memory="true" value="BLocal"/>

				<table name="tRoleTimers" key="string" value="Zeze.Builtin.Timer.BGameOnlineTimer" memory="true"/>
				<table name="tRoleOfflineTimers" key="long" value="Zeze.Builtin.Timer.BOfflineTimers"/>

				<!-- interface -->
				<!--
				* 事件
				. Login Events
				. ReLogin Events
				. Logout Events
				* 数据修改
				. AddRole(account, roleId)
				. RemoveRole(account, roleId)
				. SetLastLoginRoleId?
				* 协议发送
				. SendXXX To Role
				. SendXXX To Account?
				. Transmit
				. SendReliable
				* 重载：一般不需要。
				. override ProcessLoginRequest
				. override ProcessReLoginRequest
				. override ProcessLogoutRequest
				-->
			</module> Online 11013

			<module name="Bag" id="11014">
				<enum name="ResultCodeFromInvalid"  value="1"/>
				<enum name="ResultCodeToInvalid"    value="2"/>
				<enum name="ResultCodeFromNotExist" value="3"/>
				<enum name="ResultCodeTrySplitButTargetExistDifferenceItem" value="4"/>

				<bean name="BMove">
					<variable id="1" name="BagName" type="string"/>
					<variable id="2" name="PositionFrom" type="int"/>
					<variable id="3" name="PositionTo" type="int"/>
					<variable id="4" name="number" type="int"/> -1 表示全部
				</bean>
				<bean name="BDestroy">
					<variable id="1" name="BagName" type="string"/>
					<variable id="2" name="Position" type="int"/>
				</bean>
				<!--
				<bean name="BChanged">
					<enum name="TagIncrementChange" value="0"/> 增量修改。
					<enum name="TagRecordRemoved"   value="1"/> 整个记录删除了。
					<enum name="TagRecordReplace"   value="2"/> 整个记录发生了变更，需要先清除本地数据，再替换进去。

					<variable id="1" name="BagName" type="string"/>
					<variable id="2" name="Tag" type="int"/> 处理方式
					<variable id="3" name="Replaced" type="map" key="int" value="BItem"/> key is position
					<variable id="4" name="Removed" type="set" value="int"/> key is position
				</bean>
				<protocol name="NotifyChanged" argument="BChanged" handle="client"/> 所有的包裹改变都通过这个协议发送。
				<protocol name="NotifyBag" argument="BBag" handle="client"/> 包裹全部改变时发送这个协议。在可靠消息框架内使用。不直接处理。
				-->

				<rpc name="Move" argument="BMove" handle="server"/>
				<rpc name="Destroy" argument="BDestroy" handle="server"/>

				<bean name="BItem">
					<variable id="1" name="Id" type="int"/>
					<variable id="2" name="Number" type="int"/>
					<variable id="3" name="Item" type="dynamic">
						<GetSpecialTypeIdFromBean value="Zeze.Game.Bag::getSpecialTypeIdFromBean"/>
						<CreateBeanFromSpecialTypeId value="Zeze.Game.Bag::createBeanFromSpecialTypeId"/>
					</variable>
				</bean>

				<bean name="BBag">
					<variable id="1" name="Capacity" type="int"/>
					<variable id="2" name="Items" type="map" key="int" value="BItem"/> key is bag position
				</bean>

				<bean name="BItemClasses">
					<variable id="1" name="ItemClasses" type="set" value="string"/>
				</bean>

				<table name="tbag" key="string" value="BBag"/> key is bag name
				<table name="tItemClasses" key="int" value="BItemClasses"/> key is 1, only one record
			</module> Bag 11014

			<module name="Rank" id="11015">
				<beankey name="BConcurrentKey">
					<enum name="TimeTypeTotal"     value="0"/> 所有时间
					<enum name="TimeTypeDay"       value="1"/> 每天：Year为当前时间的年份，Offset为天
					<enum name="TimeTypeWeek"      value="2"/> 每周：Year为当前时间的年份，Offset为周
					<enum name="TimeTypeSeason"    value="3"/> 每季：Year为当前时间的年份，Offset为季
					<enum name="TimeTypeYear"      value="4"/> 每年：Year为当前时间的年份，Offset为0
					<enum name="TimeTypeCustomize" value="5"/> 自定义：此时Offset是自定义Id，Year为0

					<variable id="1" name="RankType"     type="int"/>
					<variable id="2" name="ConcurrentId" type="int"/> = hash % ConcurrentLevel
					<variable id="3" name="TimeType"     type="int"/>
					<variable id="4" name="Year"         type="int"/>
					<variable id="5" name="Offset"       type="long"/> 根据TimeType，含义不同
				</beankey>

				<bean name="BRankValue">
					<variable id="1" name="RoleId"     type="long"/>
					<variable id="2" name="Value"      type="long"/> 含义由 BConcurrentKey.RankType 决定
					<variable id="3" name="ValueEx"    type="binary"/> 自定义数据。
				</bean>

				<bean name="BRankList">
					<variable id="1" name="RankList"  type="list" value="BRankValue"/>
				</bean>

				<table name="trank" key="BConcurrentKey" value="BRankList"/>
			</module> Rank 11015

			<module name="TaskBase" id="11018">
				<!-- 任务状态 -->
				<enum name="Disabled" value="0"/> 不可接取
				<enum name="Init" value="1"/> 可接取
				<enum name="Processing" value="2"/> 已经接取，未完成
				<enum name="Finished" value="3"/> 已完成，未提交
				<enum name="Committed" value="4"/> 已经提交
				<!-- ======================================== Task的Bean数据 ======================================== -->
				<beankey name="BTaskKey">
					<variable id="1" name="TaskId" type="long"/>
				</beankey>
				<bean name="BTask">
					<variable id="1" name="roleId" type="long"/> 角色的Id
					<variable id="2" name="taskId" type="long"/> 任务的Id
					<variable id="3" name="taskType" type="string"/> 任务的类型：每日任务、隐藏任务等
					<variable id="4" name="taskState" type="int"/> 任务的状态：可接取、已接取、已完成等
					<variable id="5" name="taskName" type="string"/> 任务的名字
					<variable id="6" name="taskDescription" type="string"/> 任务的描述。
					<variable id="7" name="preTaskIds" type="list" value="long"/> 前置任务Id（只需要存储前置任务就可以建立起整个TaskGraphics，不需要存储后置任务，这样也方便扩展）
					<variable id="8" name="currentPhaseId" type="long"/> 当前的PhaseId
					<variable id="9" name="taskPhases" type="map" key="long" value="BTaskPhase"/> 该任务所有的Phase
					<variable id="10" name="extendedData" type="dynamic"> 用于自定义扩展Task的数据
						<GetSpecialTypeIdFromBean value="Zeze.Game.TaskBase::getSpecialTypeIdFromBean"/>
						<CreateBeanFromSpecialTypeId value="Zeze.Game.TaskBase::createBeanFromSpecialTypeId"/>
					</variable>
				</bean>
				<bean name="BDailyTask">
					<variable id="1" name="everydayTaskCount" type="int"/> 每天任务刷新的个数
					<variable id="2" name="flushTime" type="long"/> 刷新时间，按照UTC+0存储，自动翻译到各个机子上
					<variable id="3" name="todayTaskPhaseIds" type="list" value="long"/> 今天的所有的每日任务的Id（实际上是PhaseId）
				</bean>
				<!-- Task的总表，包含了所有的Task的Bean -->
				<table name="tTask" key="BTaskKey" value="BTask"/>
				<!--
					Task rpc
					所有的TaskEvent均由这个rpc驱动（仿照现serverdev的结构）
					这个rpc的参数是BTaskEvent，内部的DynamicData是各个不同的任务的不同Event数据
				-->
				<bean name="BTaskEvent">
					<variable id="1" name="roleId" type="long"/> 当新角色创建时直接发roleId，不附带任何下面这两个dynamics，能够创建整个角色的初始任务表。
					<variable id="2" name="eventType" type="dynamic">
						<value bean="BAcceptTaskEvent"/> 接任务专用Bean
						<value bean="BSubmitTaskEvent"/> 交任务专用Bean
                        <value bean="BSpecificTaskEvent"/> 交给特定任务的事件（如NPC对话选择任务）
                        <value bean="BBroadcastTaskEvent"/> 广播给所有任务的事件（如击杀怪物的任务）
					</variable>
					<variable id="3" name="eventBean" type="dynamic"> 用于携带各种不同的TaskEvent/PhaseEvent/ConditionEvent，TriggerTaskEvent这个rpc会自动转发
						<GetSpecialTypeIdFromBean value="Zeze.Game.TaskBase::getSpecialTypeIdFromBean"/>
						<CreateBeanFromSpecialTypeId value="Zeze.Game.TaskBase::createBeanFromSpecialTypeId"/>
					</variable>
				</bean>
				<bean name="BAcceptTaskEvent">
					<variable id="1" name="taskId" type="long"/>
				</bean>
				<bean name="BSubmitTaskEvent">
					<variable id="1" name="taskId" type="long"/>
				</bean>
				<bean name="BSpecificTaskEvent">
                    <variable id="1" name="taskId" type="long"/>
				</bean>
				<bean name="BBroadcastTaskEvent">
                    <variable id="1" name="isBreakIfAccepted" type="bool"/>
				</bean>
				<enum name="TaskResultFailure" value="0"/> 使用二进制bit返回值，允许多重result返回。 1代表执行成功。
				<enum name="TaskResultSuccess" value="1"/>
				<enum name="TaskResultNewRoleTasksCreated" value="2"/>
				<enum name="TaskResultAccepted" value="4"/>
				<enum name="TaskResultRejected" value="8"/>
				<enum name="TaskResultInvalidRoleId" value="16"/>
				<enum name="TaskResultTaskNotFound" value="32"/>
				<bean name="BTaskEventResult">
					<variable id="1" name="resultCode" type="long"/> 返回码
					<variable id="2" name="changedTasks" type="list" value="BTask"/> 变化的任务
				</bean>
				<rpc name="TriggerTaskEvent" argument="BTaskEvent" result="BTaskEventResult" handle="server"/>
				<!-- ======================================== Task的Bean数据 ======================================== -->
				<!-- ======================================== TaskPhase的Bean数据 ======================================== -->
				<bean name="BTaskPhase">
					<variable id="2" name="phaseId" type="long"/> Phase的Id
					<variable id="3" name="phaseName" type="string"/> Phase的名字
					<variable id="4" name="phaseDescription" type="string"/> Phase的描述
					<variable id="5" name="prePhaseIds" type="list" value="long"/> 前置PhaseId
					<variable id="6" name="nextPhaseId" type="long"/> 下一个PhaseId（允许通过不同的conditions完成情况动态变化）
					<variable id="7" name="subPhases" type="map" key="long" value="BSubPhase"/> 该Phase包含的所有的SubPhase
					<variable id="8" name="currentSubPhaseId" type="long"/> 当前的SubPhaseId
				</bean>
				<bean name="BSubPhase">
					<variable id="1" name="subPhaseId" type="long"/>
					<variable id="2" name="completeType" type="string"/> CompleteAll/CompleteAny
					<variable id="3" name="nextSubPhaseId" type="long"/> 下一个SubPhaseId（允许通过不同的conditions完成情况动态变化）
					<variable id="4" name="conditions" type="list" value="BTaskCondition"/> 该SubPhase包含的所有的Condition
				</bean>
				<!-- ======================================== TaskPhase的Bean数据 ======================================== -->
				<!-- ======================================== TaskCondition的Bean数据 ======================================== -->
				<enum name="CompleteNPCTalk" value="31"/>
				<enum name="CompleteArriveArea" value="32"/>
				<enum name="CompleteCollectItem" value="33"/>
				<enum name="CompleteSubmitItem" value="34"/>
				<enum name="CompleteArriveNPC" value="35"/>
				<bean name="BTaskCondition"> TODO: 允许广播
					<variable id="2" name="conditionType" type="string"/> Condition的完成类型
					<variable id="3" name="extendedData" type="dynamic"> 用于自定义扩展Condition的数据
						<GetSpecialTypeIdFromBean value="Zeze.Game.TaskBase::getSpecialTypeIdFromBean"/>
						<CreateBeanFromSpecialTypeId value="Zeze.Game.TaskBase::createBeanFromSpecialTypeId"/>
					</variable>
				</bean>
				<!-- 内置条件类型：击杀怪物 -->
				<bean name="BTConditionKillMonster">
					<variable id="1" name="monsters" type="map" key="long" value="int"/> key：monsterId，value：monsterCount
					<variable id="2" name="monstersKilled" type="map" key="long" value="int"/> key：monsterId，value：monsterCount
				</bean>
				<bean name="BTConditionKillMonsterEvent">
					<variable id="1" name="monsters" type="map" key="long" value="int"/> key：monsterId，value：monsterCount
				</bean>
				<!-- 内置条件类型：提交物品 -->
				<bean name="BTConditionSubmitItem">
					<variable id="1" name="items" type="map" key="long" value="int"/> key：itemId，value：itemCount
					<variable id="2" name="itemsSubmitted" type="map" key="long" value="int"/> key：itemId，value：itemCount
				</bean>
				<bean name="BTConditionSubmitItemEvent">
					<variable id="1" name="items" type="map" key="long" value="int"/> key：itemId，value：itemCount
				</bean>
				<!-- 内置条件类型：到达位置 -->
				<bean name="BTConditionReachPosition">
					<variable id="1" name="dimension" type="int"/> 2D | 3D
					<variable id="2" name="x" type="double"/>
					<variable id="3" name="y" type="double"/>
					<variable id="4" name="z" type="double"/>
					<variable id="5" name="radius" type="double"/>
					<variable id="6" name="Reached" type="bool"/>
				</bean>
                <bean name="BTConditionReachPositionEvent">
					<variable id="1" name="x" type="double"/>
					<variable id="2" name="y" type="double"/>
					<variable id="3" name="z" type="double"/>
                </bean>
				<!-- 内置条件类型：NPC对话-->
				<bean name="BTConditionNPCTalk">
					<variable id="3" name="npcId" type="long"/>
					<variable id="4" name="dialogOptions" type="map" key="string" value="int"/> key为对话的Id（String类型），value为对话选项有几个。如果没有就不用加。
					<variable id="5" name="dialogSelected" type="map" key="string" value="int"/> key为对话的Id（String类型），value为选了第几个选项。如果还没选初始化为-1。
				</bean>
				<bean name="BTConditionNPCTalkEvent">
					<variable id="3" name="finished" type="bool"/> 如果完成了对话，也可以用这个Event发一条，下面的就留空。
					<variable id="4" name="dialogId" type="string"/>
					<variable id="5" name="dialogOption" type="int"/> 选择了第几个选项
				</bean>
				<!-- ======================================== TaskCondition的Bean数据 ======================================== -->
				<!-- 记录每个角色的任务数据 -->
				<bean name="BRoleTasks">
					<variable id="1" name="processingTasks" type="map" key="long" value="BTask"/> 处理中的任务（不可接、可接、正在进行、可提交等所有处理中的任务）
					<variable id="2" name="finishedTaskIds" type="set" value="long"/> 已经完成封存的任务
				</bean>
				<table name="tRoleTask" key="long" value="BRoleTasks"/>

				<bean name="BEventClasses">
					<variable id="1" name="EventClasses" type="set" value="string"/>
				</bean>
				<table name="tEventClasses" key="int" value="BEventClasses"/> key is 1, only one record

			</module> TaskBase

		</module> Game

		<module name="Online" id="11100">
			<enum value="0" name="ResultCodeSuccess"/>
			<enum value="1" name="ResultCodeCreateRoleDuplicateRoleName"/>
			<enum value="2" name="ResultCodeAccountNotExist"/>
			<enum value="3" name="ResultCodeRoleNotExist"/>
			<enum value="4" name="ResultCodeNotLastLoginRoleId"/>
			<enum value="5" name="ResultCodeOnlineDataNotFound"/>
			<enum value="6" name="ResultCodeReliableNotifyConfirmIndexOutOfRange"/>
			<enum value="7" name="ResultCodeNotLogin"/>

			<enum value="0" name="eOffline"/>
			<enum value="1" name="eLinkBroken"/>
			<enum value="2" name="eLogined"/>

			<!-- protocols -->
			<bean name="BLogin">
				<variable id="1" name="ClientId" type="string" />
			</bean>
			<bean name="BReLogin">
				<variable id="1" name="ClientId" type="string" />
				<variable id="2" name="ReliableNotifyConfirmIndex" type="long"/>
			</bean>
			<bean name="BReliableNotifyConfirm">
				<variable id="1" name="ClientId" type="string" />
				<variable id="2" name="ReliableNotifyConfirmIndex" type="long"/>
				<variable id="3" name="Sync" type="bool"/>
			</bean>
			<bean name="BReliableNotify">
				<variable id="1" name="Notifies" type="list" value="binary"/> full encoded protocol list
				<variable id="2" name="ReliableNotifyIndex" type="long"/> Notify的计数开始。客户端收到的总计数为：start + Notifies.Count
			</bean>

			<rpc name="Login"   argument="BLogin"   handle="server"/> 登录角色
			<rpc name="ReLogin" argument="BReLogin" handle="server"/> 网络断开重新登录（数据无法同步时会失败，此时客户端应该重新走完整的登录流程-装载数据。）
			<rpc name="Logout" handle="server"/> 登出
			<rpc name="ReliableNotifyConfirm" argument="BReliableNotifyConfirm" handle="server"/>
			<protocol name="SReliableNotify" argument="BReliableNotify" handle="client"/>

			<bean name="BDelayLogoutCustom">
				<variable id="1" name="Account" type="string"/>
				<variable id="2" name="ClientId" type="string"/>
				<variable id="3" name="LoginVersion" type="long"/>
			</bean>
			<!-- tables -->
			<beankey name="BLink">
				<variable id="1" name="LinkName" type="string"/>
				<variable id="2" name="LinkSid"  type="long"/>
				<variable id="3" name="State"  type="int"/>
			</beankey>
			<bean name="BOnline">
				<variable id="1" name="Link" type="BLink"/>
				<variable id="2" name="LoginVersion" type="long"/>
				<!-- 下面的定义用来实现可靠的协议通告。 -->
				<variable id="3" name="ReliableNotifyMark"         type="set" value="string"/>
				<variable id="4" name="ReliableNotifyIndex"        type="long"/>
				<variable id="5" name="ReliableNotifyConfirmIndex" type="long"/>
				<variable id="6" name="ServerId"                   type="int"/>
				<variable id="7" name="LogoutVersion" type="long"/>
			</bean>
			<bean name="BNotify">
				<variable id="1" name="FullEncodedProtocol" type="binary"/>
			</bean>
			<bean name="BOnlines">
				<variable id="1" name="Logins" type="map" key="string" value="BOnline"/> key is ClientId
				<variable id="2" name="LastLoginVersion" type="long"/> 用来生成 account 登录版本号。每次递增。
			</bean>

			<table name="tonline"  key="string" value="BOnlines"/>

			<bean name="BAny">
				<variable id="1" name="Any" type="dynamic">
					<GetSpecialTypeIdFromBean value="Zeze.Arch.Online::getSpecialTypeIdFromBean"/>
					<CreateBeanFromSpecialTypeId value="Zeze.Arch.Online::createBeanFromSpecialTypeId"/>
				</variable>
			</bean>
			<bean name="BLocal">
				<variable id="1" name="LoginVersion" type="long"/>
				<variable id="2" name="Datas" type="map" key="string" value="BAny"/>
			</bean>
			<bean name="BLocals">
				<variable id="1" name="Logins" type="map" key="string" value="BLocal"/> key is ClientId
			</bean>
			<table name="tlocal" key="string" memory="true" value="BLocals"/>
		</module> Online 11100

		<module name="Timer" id="11016">
			<enum name="eMissfirePolicyNothing" value="0"/> quartz 兼容
			<enum name="eMissfirePolicyRunOnce" value="1"/> quartz 兼容
			<enum name="eMissfirePolicyRunOnceOldNext" value="2"/> 新策略，马上补一次调用，但保持下一次调度时间不变。比如用于，每天定点开启活动。

			<bean name="BNodeRoot">
				<variable id="1" name="HeadNodeId" type="long"/>
				<variable id="2" name="TailNodeId" type="long"/>
				<variable id="3" name="LoadSerialNo" type="long"/>
			</bean>

			<table name="tNodeRoot" key="int" value="BNodeRoot" /> key is serverid 每一台server拥有自己的链表。

			<bean name="BTimer">
				<variable id="1" name="TimerName" type="string"/>
				<variable id="2" name="HandleName" type="string"/>
				<variable id="3" name="TimerObj" type="dynamic">
					<value bean="BSimpleTimer"/>
					<value bean="BCronTimer"/>
				</variable>
				<variable id="4" name="CustomData" type="dynamic">
					<GetSpecialTypeIdFromBean value="Zeze.Component.Timer::getSpecialTypeIdFromBean"/>
					<CreateBeanFromSpecialTypeId value="Zeze.Component.Timer::createBeanFromSpecialTypeId"/>
				</variable>
				<variable id="5" name="ConcurrentFireSerialNo" type="long"/>
			</bean>

			<bean name="BSimpleTimer">
				<variable id="1" name="Delay" type="long"/>
				<variable id="2" name="Period" type="long"/>
				<variable id="3" name="RemainTimes" type="long"/> -1 表示不限次数。
				<variable id="4" name="HappenTimes" type="long"/>
				<variable id="5" name="StartTime" type="long"/>
				<variable id="6" name="EndTime" type="long"/> -1表示没有结束时间
				<variable id="7" name="NextExpectedTime" type="long"/>
				<variable id="8" name="ExpectedTime" type="long"/>
				<variable id="9" name="HappenTime" type="long"/>
				<variable id="10" name="MissfirePolicy" type="int"/>
			</bean>

			<bean name="BCronTimer">
				<variable id="1" name="CronExpression" type="string"/>
				<variable id="2" name="NextExpectedTime" type="long"/>
				<variable id="3" name="ExpectedTime" type="long"/>
				<variable id="4" name="HappenTime" type="long"/>
				<variable id="5" name="RemainTimes" type="long"/> -1 表示不限次数。
				<variable id="6" name="EndTime" type="long"/> 结束时间 -1 表示永不结束
				<variable id="7" name="MissfirePolicy" type="int"/>
			</bean>

			<bean name="BNode">
				<variable id="1" name="PrevNodeId" type="long"/>
				<variable id="2" name="NextNodeId" type="long"/>
				<variable id="3" name="Timers" type="map[string, BTimer]"/>
			</bean>

			<table name="tNodes" key="long" value="BNode"/>

			<bean name="BIndex">
				<variable id="1" name="ServerId" type="int"/>
				<variable id="2" name="NodeId" type="long"/>
				<variable id="3" name="SerialId" type="long"/> timer系列号，用来区分是否新注册的。
			</bean>

			<table name="tIndexs" key="string" value="BIndex" />

			<bean name="BCustomClasses">
				<variable id="1" name="CustomClasses" type="set" value="string"/>
			</bean>

			<table name="tCustomClasses" key="int" value="BCustomClasses"/> key is 1, only one record

			<bean name="BTransmitCronTimer">
				<variable id="1" name="TimerId" type="string"/>
				<variable id="2" name="CronTimer" type="BCronTimer"/>
				<variable id="3" name="HandleClass" type="string"/>
				<variable id="4" name="CustomClass" type="string"/>
				<variable id="5" name="CustomBean" type="binary"/>
				<variable id="6" name="LoginVersion" type="long"/>
			</bean>
			<bean name="BTransmitSimpleTimer">
				<variable id="1" name="TimerId" type="string"/>
				<variable id="2" name="SimpleTimer" type="BSimpleTimer"/>
				<variable id="3" name="HandleClass" type="string"/>
				<variable id="4" name="CustomClass" type="string"/>
				<variable id="5" name="CustomBean" type="binary"/>
				<variable id="6" name="LoginVersion" type="long"/>
			</bean>

			<!-- Online Timer -->
			<bean name="BArchOnlineTimer"> 保存在内存Map中
				<variable id="1" name="Account" type="string"/>
				<variable id="2" name="ClientId" type="string"/>
				<variable id="3" name="TimerObj" type="dynamic">
					<value bean="BSimpleTimer"/>
					<value bean="BCronTimer"/>
				</variable>
				<variable id="4" name="LoginVersion" type="long"/>
				<variable id="5" name="SerialId" type="long"/>
			</bean>

			<bean name="BGameOnlineTimer"> 保存在内存Map中
				<variable id="1" name="RoleId" type="long"/>
				<variable id="2" name="TimerObj" type="dynamic">
					<value bean="BSimpleTimer"/>
					<value bean="BCronTimer"/>
				</variable>
				<variable id="3" name="LoginVersion" type="long"/>
				<variable id="4" name="SerialId" type="long"/>
			</bean>

			<table name="tAccountTimers" key="string" value="BArchOnlineTimer" memory="true"/>

			<bean name="BOnlineCustom"> 保存真正的用户自定义数据
				<variable id="1" name="CustomData" type="dynamic">
					<GetSpecialTypeIdFromBean value="Zeze.Component.Timer::getOnlineSpecialTypeIdFromBean"/>
					<CreateBeanFromSpecialTypeId value="Zeze.Component.Timer::createOnlineBeanFromSpecialTypeId"/>
				</variable>
			</bean>
			<bean name="BOnlineTimers"> 这个Bean作为Online.Local.Any存储
				<variable id="1" name="TimerIds" type="map[string, BOnlineCustom]"/>
			</bean>

			<!-- Offline Timer -->
			<bean name="BOfflineAccountCustom">
				<variable id="1" name="TimerName"    type="string"/>
				<variable id="2" name="Account"      type="string"/>
				<variable id="3" name="ClientId"     type="string"/>
				<variable id="4" name="LoginVersion" type="long" default="-1"/>
				<variable id="5" name="HandleName"   type="string"/>
				<variable id="6" name="CustomData"   type="dynamic"> 保存真正的用户自定义数据
					<GetSpecialTypeIdFromBean value="Zeze.Component.Timer::getSpecialTypeIdFromBean"/>
					<CreateBeanFromSpecialTypeId value="Zeze.Component.Timer::createBeanFromSpecialTypeId"/>
				</variable>
			</bean>
			<bean name="BOfflineRoleCustom">
				<variable id="1" name="TimerName"    type="string"/>
				<variable id="2" name="RoleId"       type="long"/>
				<variable id="3" name="LoginVersion" type="long" default="-1"/>
				<variable id="4" name="HandleName"   type="string"/>
				<variable id="5" name="CustomData"   type="dynamic"> 保存真正的用户自定义数据
					<GetSpecialTypeIdFromBean value="Zeze.Component.Timer::getSpecialTypeIdFromBean"/>
					<CreateBeanFromSpecialTypeId value="Zeze.Component.Timer::createBeanFromSpecialTypeId"/>
				</variable>
				<variable id="6" name="OnlineSetName"   type="string"/>
			</bean>
			<bean name="BOfflineTimers">
				key是timerId，value是注册离线定时器的ServerId。
				<variable id="1" name="OfflineTimers" type="map[string, int]"/>
			</bean>

			<beankey name="BAccountClientId">
				<variable id="1" name="Account" type="string"/>
				<variable id="2" name="ClientId" type="string"/>
			</beankey>
			<table name="tAccountOfflineTimers" key="BAccountClientId" value="BOfflineTimers"/>

		</module>

		<module name="Statistics" id="11020">
			<servlet name="Query"/>
		</module>

		<module name="DbWeb" id="11021">
			<servlet name="ListTable" TransactionLevel="None"/>
			<servlet name="GetValue" TransactionLevel="None"/>
			<servlet name="WalkTable" TransactionLevel="None"/>
			<servlet name="PutRecord" TransactionLevel="Serializable"/>
			<servlet name="DeleteRecord" TransactionLevel="Serializable"/>
			<servlet name="ClearTable" TransactionLevel="None"/>
		</module>

		<module name="ServiceManagerWithRaft" base="Zeze.Services.ServiceManager.AbstractAgent" id="11022">
			<bean name="BLogin">
				<variable id="1" name="SessionName" type="string"/>
			</bean>

			<rpc name="Login" argument="BLogin" base="Zeze.Raft.RaftRpc" handle="server"/>

			<rpc name="AllocateId" argument="Zeze.Services.ServiceManager.BAllocateIdArgument" result="Zeze.Services.ServiceManager.BAllocateIdResult" base="Zeze.Raft.RaftRpc" handle="server"/>
			<rpc name="CommitServiceList" argument="Zeze.Services.ServiceManager.BServiceListVersion" base="Zeze.Raft.RaftRpc" handle="client"/>
			<rpc name="KeepAlive" base="Zeze.Raft.RaftRpc" handle="client"/>
			<rpc name="NotifyServiceList" argument="Zeze.Services.ServiceManager.BServiceInfos" base="Zeze.Raft.RaftRpc" handle="client"/>
			<rpc name="OfflineNotify" argument="Zeze.Services.ServiceManager.BOfflineNotify" base="Zeze.Raft.RaftRpc" handle="client"/>
			<rpc name="OfflineRegister" argument="Zeze.Services.ServiceManager.BOfflineNotify" base="Zeze.Raft.RaftRpc" handle="server"/>
			<rpc name="ReadyServiceList" argument="Zeze.Services.ServiceManager.BServiceListVersion" base="Zeze.Raft.RaftRpc" handle="server"/>
			<rpc name="Register" argument="Zeze.Services.ServiceManager.BServiceInfo" base="Zeze.Raft.RaftRpc" handle="server,client">
				<enum name="Success" value="0"/>
				<enum name="DuplicateRegister" value="1"/>
			</rpc>
			<rpc name="SetServerLoad" argument="Zeze.Services.ServiceManager.BServerLoad" base="Zeze.Raft.RaftRpc" handle="server,client"/>
			<rpc name="Subscribe" argument="Zeze.Services.ServiceManager.BSubscribeInfo" base="Zeze.Raft.RaftRpc" handle="server">
				<enum name="Success" value="0"/>
				<enum name="DuplicateSubscribe" value="1"/>
				<enum name="UnknownSubscribeType" value="2"/>
			</rpc>
			<rpc name="SubscribeFirstCommit" argument="Zeze.Services.ServiceManager.BServiceInfos" base="Zeze.Raft.RaftRpc" handle="client"/>
			<rpc name="UnRegister" argument="Zeze.Services.ServiceManager.BServiceInfo" base="Zeze.Raft.RaftRpc" handle="server,client"/>
			<rpc name="UnSubscribe" argument="Zeze.Services.ServiceManager.BSubscribeInfo" base="Zeze.Raft.RaftRpc" handle="server">
				<enum name="Success" value="0"/>
				<enum name="NotExist" value="1"/>
			</rpc>
			<rpc name="Update" argument="Zeze.Services.ServiceManager.BServiceInfo" base="Zeze.Raft.RaftRpc" handle="server,client">
				<enum name="Success" value="0"/>
				<enum name="ServiceNotRegister" value="1"/>
				<enum name="ServerStateError" value="2"/>
				<enum name="ServiceIdentityNotExist" value="3"/>
				<enum name="ServiceNotSubscribe" value="4"/>
			</rpc>
			<rpc name="NormalClose" base="Zeze.Raft.RaftRpc" handle="server"/>

			<!-- autokey -->
			<bean name="BAutoKey" kind="rocks">
				<variable id="1" name="Current" type="long"/>
			</bean>
			<table name="tAutoKey" key="string" value="BAutoKey" kind="rocks"/>

			<!-- session -->
			<bean name="BOfflineNotifyRocks" kind="rocks">
				<variable id="1" name="ServerId" type="int"/>
				<variable id="2" name="NotifyId" type="string"/>
				<variable id="3" name="NotifySerialId" type="long"/>
				<variable id="4" name="NotifyContext" type="binary"/>
			</bean>
			<bean name="BSession" kind="rocks">
				<variable id="1" name="SessionId" type="long"/>
				<variable id="2" name="OfflineRegisterServerId" type="int"/>
				<variable id="3" name="OfflineRegisterNotifies" type="map[string, BOfflineNotifyRocks]"/>
				<variable id="4" name="Registers" type="map[BServiceInfoKeyRocks, BServiceInfoRocks]"/>
				<variable id="5" name="Subscribes" type="map[string, BSubscribeInfoRocks]"/>
			</bean>
			<beankey name="BServiceInfoKeyRocks" kind="rocks">
				<variable id="1" name="ServiceName" type="string"/>
				<variable id="2" name="ServiceIdentity" type="string"/>
			</beankey>
			<bean name="BServiceInfoRocks" kind="rocks">
				<variable id="1" name="ServiceName" type="string"/>
				<variable id="2" name="ServiceIdentity" type="string"/>
				<variable id="3" name="PassiveIp" type="string"/>
				<variable id="4" name="PassivePort" type="int"/>
				<variable id="5" name="ExtraInfo" type="binary"/>
				<variable id="6" name="SessionName" type="string"/>
			</bean>
			<bean name="BSubscribeInfoRocks" kind="rocks">
				<variable id="1" name="ServiceName" type="string"/>
				<variable id="2" name="SubscribeType" type="int"/>
			</bean>
			<table name="tSession" key="string" value="BSession" kind="rocks"/>

			<!-- load observers -->
			<bean name="BLoadObservers" kind="rocks">
				<variable name="Observers" id="1" type="set[string]"/> 负载订阅者，subscribeAndSend中订阅。
			</bean>
			<table name="tLoadObservers" key="string" value="BLoadObservers" kind="rocks"/>

			<!-- service(server state) -->
			<bean name="BServerState" kind="rocks">
				<variable id="1" name="ServiceName" type="string"/>
				<variable id="2" name="ServiceInfos" type="map[string, BServiceInfoRocks]"/>
				<variable id="3" name="Simple" type="map[string, BSubscribeStateRocks]"/>
				<variable id="4" name="ReadyCommit" type="map[string, BSubscribeStateRocks]"/>
				<variable id="5" name="SerialId" type="long"/>
			</bean>
			<bean name="BSubscribeStateRocks" kind="rocks">
				<variable id="1" name="Ready" type="bool"/>
			</bean>
			<table name="tServerState" key="string" value="BServerState" kind="rocks"/>
		</module>

		<module name="RocketMQ" id="11023">
			<module name="Producer" id="11024">
				<bean name="BTransactionMessageResult">
					<variable id="1" name="Result" type="bool"/>
					<variable id="2" name="Timestamp" type="long"/>
				</bean>
				<table name="tSent" key="string" value="BTransactionMessageResult"/>
			</module>
		</module>

		<module name="AutoKey" id="11025">
			<beankey name="BSeedKey">
				<variable id="1" name="ServerId" type="int"/>
				<variable id="2" name="KeyName"  type="string"/>
			</beankey>
			<bean name="BAutoKey">
				<variable id="1" name="NextId" type="long"/>
			</bean>
			<table name="tAutoKeys" key="BSeedKey" value="BAutoKey" CheckpointWhenCommit="true" />
		</module>

		<module name="Dbh2" id="11026" DefaultTransactionLevel="None">
			<module name="Master" id="11027" DefaultTransactionLevel="None">
				<enum name="eDatabaseNotFound" value="1"/>
				<enum name="eTableNotFound" value="2"/>
				<enum name="eTableIsNew" value="3"/>
				<enum name="eSplittingBucketNotFound" value="4"/>
				<enum name="eManagerNotFound" value="5"/>
				<enum name="eSplittingBucketExist" value="6"/>
				<enum name="eTooFewManager" value="7"/>
				
				<!--
				Dbh2发现桶没找到错误时，使用GetBuckets得到完整的信息。
				因为只LocateBucket最新的桶信息虽然能用，但是出现桶没找到错误时，通常意味着前一个桶的信息也需要更新。
				不更新旧桶，桶的定位方法可以工作（只依赖桶的KeyFrist），但感觉不好。
				所以LocateBucket先不用，仅使用GetBuckets。
				-->
				<bean name="BLocateBucket">
					<variable id="1" name="Database" type="string"/>
					<variable id="2" name="Table" type="string"/>
					<variable id="3" name="Key" type="binary"/>
				</bean>
				<rpc name="LocateBucket" argument="BLocateBucket" result="Zeze.Builtin.Dbh2.BBucketMeta" UseData="true" handle="server"/>

				<bean name="BGetBuckets">
					<variable id="1" name="Database" type="string"/>
					<variable id="2" name="Table" type="string"/>
				</bean>
				<external bean="Zeze.Dbh2.Master.MasterTable" />
				<rpc name="GetBuckets" argument="BGetBuckets" result="Zeze.Dbh2.Master.MasterTable" UseData="true" handle="server"/>
				
				<bean name="BCreateDatabase">
					<variable id="1" name="Database" type="string"/>
				</bean>
				<rpc name="CreateDatabase" argument="BCreateDatabase" UseData="true" handle="server"/>

				<bean name="BCreateTable">
					<variable id="1" name="Database" type="string"/>
					<variable id="2" name="Table" type="string"/>
				</bean>
				<rpc name="CreateTable" argument="BCreateTable" result="Zeze.Dbh2.Master.MasterTable" UseData="true" handle="server"/>

				<!-- 下面是Master跟Dbh2Manager通讯的协议，也包装在MasterAgent中 -->
				<rpc name="CreateBucket" argument="Zeze.Builtin.Dbh2.BBucketMeta" UseData="true" handle="client"/>
				<rpc name="CreateSplitBucket" argument="Zeze.Builtin.Dbh2.BBucketMeta" result="Zeze.Builtin.Dbh2.BBucketMeta" UseData="true" handle="server"/>

				<bean name="BRegister">
					<variable id="1" name="Dbh2RaftAcceptorName" type="string"/>
					<variable id="2" name="BucketCount" type="int"/>
				</bean>
				<rpc name="Register" argument="BRegister" UseData="true" handle="server"/>

				<bean name="BLoad">
					<variable id="1" name="Load" type="double"/>
				</bean>
				<rpc name="ReportLoad" argument="BLoad" UseData="true" handle="server"/>

				<bean name="BBucketCount">
					<variable id="1" name="Count" type="int"/>
				</bean>
				<rpc name="ReportBucketCount" argument="BBucketCount" UseData="true" handle="server"/>
				
				<bean name="BEndSplit">
					<variable id="1" name="From" type="Zeze.Builtin.Dbh2.BBucketMeta"/>
					<variable id="2" name="To" type="Zeze.Builtin.Dbh2.BBucketMeta"/>
				</bean>
				<rpc name="EndSplit" argument="BEndSplit" UseData="true" handle="server"/>
			</module>

			<enum name="eBucketNotFound" value="1"/>
			<enum name="eBucketMissmatch" value="2"/>
			<enum name="eDuplicateTid" value="3"/>

			<bean name="BBucketMeta">
				<variable id="1" name="DatabaseName" type="string"/>
				<variable id="2" name="TableName" type="string"/>
				<variable id="3" name="KeyFirst" type="binary"/>
				<variable id="4" name="KeyLast" type="binary"/>
				<variable id="5" name="RaftConfig" type="string"/>
			</bean>

			<bean name="BSplitPut">
				<variable id="1" name="fromTransaction" type="bool"/>
				<variable id="2" name="Puts" type="map[binary, binary]"/> 包含delete，用Binary.Empty表示。
			</bean>
			<!-- 桶(raftNode)创建出来的第一条操作，以后分桶时也需要重新设置 -->
			<rpc name="SetBucketMeta" argument="BBucketMeta" base="Zeze.Raft.RaftRpc" UseData="true" handle="server"/>
			<rpc name="KeepAlive" base="Zeze.Raft.RaftRpc" UseData="true" handle="server"/>
			<rpc name="SplitPut" argument="BSplitPut" base="Zeze.Raft.RaftRpc" UseData="true" handle="server"/>

			<bean name="BGetArgument">
				<variable id="1" name="Database" type="string"/> 用来纠错
				<variable id="2" name="Table" type="string"/> 用来纠错
				<variable id="3" name="Key" type="binary"/>
			</bean>
			<bean name="BGetResult">
				<variable id="1" name="Null" type="bool"/>
				<variable id="2" name="Value" type="binary"/>
			</bean>
			<rpc name="Get" argument="BGetArgument" result="BGetResult" base="Zeze.Raft.RaftRpc" UseData="true" handle="server"/>

			<bean name="BBatch">
				<variable id="1" name="Puts" type="map[binary, binary]"/>
				<variable id="2" name="Deletes" type="set[binary]"/>
				<variable id="3" name="QueryIp" type="string"/>
				<variable id="4" name="QueryPort" type="int"/>
				<variable id="5" name="Tid" type="binary"/>
			</bean>
			<bean name="BPrepareBatch">
				<variable id="1" name="Database" type="string"/> 用来纠错
				<variable id="2" name="Table" type="string"/> 用来纠错
				<variable id="3" name="Batch" type="BBatch"/>
			</bean>
			<bean name="BBatchTid">
				<variable id="1" name="Tid" type="binary"/>
			</bean>
			<bean name="BRefused">
				<variable id="1" name="Refused" type="map[string, BBatch]"/>
			</bean>
			<!-- 桶正在迁移中造成Batch中部分Key失败，整个事务失败。-->
			<rpc name="PrepareBatch" argument="BPrepareBatch" result="BRefused" base="Zeze.Raft.RaftRpc" UseData="true" handle="server"/>
			<rpc name="CommitBatch" argument="BBatchTid" base="Zeze.Raft.RaftRpc" UseData="true" handle="server"/>
			<rpc name="UndoBatch" argument="BBatchTid" base="Zeze.Raft.RaftRpc" UseData="true" handle="server"/>
			
			<module name="Commit" id="11028" DefaultTransactionLevel="None">
				<enum name="eCommitNotExist" value="0"/>
				<enum name="ePreparing" value="1"/>
				<enum name="eCommitting" value="2"/>

				<bean name="BTransactionState">
					<variable id="1" name="State" type="int"/>
					<variable id="2" name="Buckets" type="list[string]"/>
				</bean>

				<bean name="BPrepareBatches">
					<variable id="1" name="Datas" type="map[string, Zeze.Builtin.Dbh2.BPrepareBatch]"/>
				</bean>
				<rpc name="Query" argument="Zeze.Builtin.Dbh2.BBatchTid" result="BTransactionState" UseData="true" handle="server"/>
				<rpc name="Commit" argument="BPrepareBatches" UseData="true" handle="server"/>
				<protocol name="DummyImportBean" argument="BTransactionState" UseData="true" handle="server"/>
			</module>
		</module>

		<!--
		可用id范围 [11029, 11100) [11102, 11999]
		-->

	</module> Builtin

	<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	<component name="Commit" gendir="src/main/java" genrelativedir="Zeze/Dbh2" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.Dbh2.Commit"/>
		</service>
	</component>

	<component name="CommitAgent" gendir="src/main/java" genrelativedir="Zeze/Dbh2" platform="zeze+java">
		<service name="" handle="client">
			<module ref="Zeze.Builtin.Dbh2.Commit"/>
		</service>
	</component>

	<component name="Master" gendir="src/main/java" genrelativedir="Zeze/Dbh2/Master" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.Dbh2.Master"/>
		</service>
	</component>

	<component name="MasterAgent" gendir="src/main/java" genrelativedir="Zeze/Dbh2/Master" platform="zeze+java" GenTables="client">
		<service name="" handle="client">
			<module ref="Zeze.Builtin.Dbh2.Master"/>
		</service>
	</component>

	<component name="Dbh2" gendir="src/main/java" genrelativedir="Zeze/Dbh2" NoRecursiveModule="true" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.Dbh2"/>
		</service>
	</component>

	<component name="Dbh2Agent" gendir="src/main/java" genrelativedir="Zeze/Dbh2" NoRecursiveModule="true" platform="zeze+java" GenTables="client">
		<service name="" handle="client">
			<module ref="Zeze.Builtin.Dbh2"/>
		</service>
	</component>

	<component name="AutoKey" gendir="src/main/java" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.AutoKey"/>
		</service>
	</component>

	<component name="Producer" gendir="src/main/java" genrelativedir="Zeze/Services/RocketMQ" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.RocketMQ.Producer"/>
		</service>
	</component>

	<component name="ServiceManagerWithRaft" gendir="src/main/java" genrelativedir="Zeze/Services" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.ServiceManagerWithRaft"/>
		</service>
	</component>

	<component name="ServiceManagerAgentWithRaft" EnableBase="true" gendir="src/main/java" genrelativedir="Zeze/Services" platform="zeze+java" GenTables="client">
		<service name="" handle="client">
			<module ref="Zeze.Builtin.ServiceManagerWithRaft"/>
		</service>
	</component>

	<component name="Timer" gendir="src/main/java" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.Timer"/>
		</service>
	</component>

	<component name="Statistics" gendir="src/main/java" platform="zeze+java">
		<service name="" handle="server,servlet">
			<module ref="Zeze.Builtin.Statistics"/>
		</service>
	</component>

	<component name="DbWeb" gendir="src/main/java" platform="zeze+java">
		<service name="" handle="server,servlet">
			<module ref="Zeze.Builtin.DbWeb"/>
		</service>
	</component>

	<!-- account online -->
	<component name="Online" gendir="src/main/java" genrelativedir="Zeze/Arch" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.Online"/>
		</service>
	</component>

	<!-- role online -->
	<component name="Online" gendir="src/main/java" genrelativedir="Zeze/Game" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.Game.Online"/>
		</service>
	</component>

	<component name="Rank" gendir="src/main/java" genrelativedir="Zeze/Game" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.Game.Rank"/>
		</service>
	</component>

	<component name="TaskBase" gendir="src/main/java" genrelativedir="Zeze/Game" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.Game.TaskBase"/>
		</service>
	</component>

	<component name="Bag" gendir="src/main/java" genrelativedir="Zeze/Game" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.Game.Bag"/>
		</service>
	</component>

	<!-- Linkd 服务模块基类，仅用来生成代码 -->
	<component name="LinkdBase" gendir="src/main/java" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.LinkdBase"/>
		</service>
	</component>

	<component name="RedoQueueServer" gendir="src/main/java" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.RedoQueue"/>
		</service>
	</component>

	<!-- Provider之间直连服务 -->
	<component name="ProviderDirect" gendir="src/main/java" genrelativedir="Zeze/Arch" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.ProviderDirect"/>
		</service>
	</component>

	<!-- Provider 在Linkd上的客户端支持组件 -->
	<component name="LinkdProvider" gendir="src/main/java" genrelativedir="Zeze/Arch" platform="zeze+java" PresentModuleFullName="Zeze.Builtin.Provider">
		<service name="" handle="client">
			<module ref="Zeze.Builtin.Provider"/>
		</service>
	</component>

	<!-- Provider 为客户端协议服务。协议通过Linkd转发 -->
	<component name="ProviderImplement" gendir="src/main/java" genrelativedir="Zeze/Arch" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.Provider"/>
		</service>
	</component>

	<component name="DelayRemove" gendir="src/main/java" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.DelayRemove"/>
		</service>
	</component>

	<component name="Queue" gendir="src/main/java" genrelativedir="Zeze/Collections" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.Collections.Queue"/>
		</service>
	</component>

	<component name="LinkedMap" gendir="src/main/java" genrelativedir="Zeze/Collections" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.Collections.LinkedMap"/>
		</service>
	</component>

	<component name="DAG" gendir="src/main/java" genrelativedir="Zeze/Collections" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.Collections.DAG"/>
		</service>
	</component>

	<component name="DepartmentTree" gendir="src/main/java" genrelativedir="Zeze/Collections" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.Collections.DepartmentTree"/>
		</service>
	</component>

	<component name="AutoKeyOld" gendir="src/main/java" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.AutoKeyOld"/>
		</service>
	</component>

	<component name="GlobalCacheManagerWithRaft" gendir="src/main/java" genrelativedir="Zeze/Services" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.GlobalCacheManagerWithRaft"/>
		</service>
	</component>

	<component name="GlobalCacheManagerWithRaftAgent" gendir="src/main/java" genrelativedir="Zeze/Services" platform="zeze+java" GenTables="client">
		<service name="" handle="client">
			<module ref="Zeze.Builtin.GlobalCacheManagerWithRaft"/>
		</service>
	</component>

	<component name="TestRocks" gendir="src/main/java" genrelativedir="Zeze/Services" platform="zeze+java">
		<service name="" handle="server">
			<module ref="Zeze.Builtin.TestRocks"/>
		</service>
	</component>

</solution>
