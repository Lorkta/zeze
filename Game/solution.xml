<?xml version="1.0" encoding="utf-8"?>

<solution name="Game" ModuleIdAllowRanges="1-100,101">
	<module name="Login" id="1">
		<bean name="BRole">
			<variable id="1" name="Id" type="long"/>
			<variable id="2" name="Name" type="string"/>
		</bean>
		<bean name="BRoles">
			<variable id="1" name="RoleList" type="list" value="BRole"/>
			<variable id="2" name="LastLoginRoleId" type="long"/>
		</bean>
		<bean name="BLogin">
			<variable id="1" name="RoleId" type="long"/>
		</bean>
		<bean name="BAuth">
			<variable id="1" name="Account" type="string"/>
			<variable id="2" name="Token" type="string"/> security. maybe password
		</bean>
		<bean name="BAuthResult">
			<variable id="1" name="Account" type="string"/>
		</bean>

		<protocol name="CCreateRole" argument="BRole" handle="server"/>
		<protocol name="SCreateRole" argument="BRole" handle="client">
			<enum name="ResultSuccess" value="0"/>
			<enum name="ResultFaild" value="1"/>
		</protocol>
		<protocol name="CGetRoleList" handle="server"/>
		<protocol name="SGetRoleList" argument="BRoles" handle="client"/>
		<protocol name="CLogin" argument="BLogin" handle="server"/>
		<protocol name="SLogin" argument="BLogin" handle="client"/>
		<protocol name="CLogout" argument="BLogin" handle="server"/>
		<protocol name="SLogout" argument="BLogin" handle="client"/>

		<!-- 只有账号验证，不包含注册功能 -->
		<protocol name="CAuth" argument="BAuth" handle="server"/>
		<protocol name="SAuth" argument="BAuthResult" handle="client">
			<enum name="ResultSuccess" value="0"/>
			<enum name="ResultFaild" value="1"/>
		</protocol>

		<bean name="BAccount">
			<variable id="1" name="Name" type="string"/>
			<variable id="2" name="Token" type="string"/>
			<variable id="3" name="Roles" type="list" value="long"/> roleid list
			<variable id="4" name="SocketSessionId" type="long"/> for kick
			<variable id="5" name="LastLoginRoleId" type="long"/>
		</bean>
		<bean name="BRoleData">
			<variable id="1" name="Name" type="string"/>
		</bean>
		<bean name="BRoleId">
			<variable id="1" name="Id" type="long"/>
		</bean>
		<bean name="BOnline">
			<variable id="1" name="SessionId" type="long"/>
			<variable id="2" name="RoleId" type="long"/>
		</bean>

		<table name="taccount" key="string" value="BAccount"/>
		<table name="trole" key="long" value="BRoleData" autokey="true"/>
		<table name="trolename" key="string" value="BRoleId"/> rolename to roleid. duplicate name check
		<table name="tonline" key="long" value="BOnline" memory="true" autokey="true"/>
	</module>

	<module name="Bag" id="2">
		<bean name="BMove">
			<variable id="1" name="PositionFrom" type="int"/>
			<variable id="2" name="PositionTo" type="int"/>
			<variable id="3" name="number" type="int"/> -1 表示全部
		</bean>
		<bean name="BDestroy">
			<variable id="1" name="Position" type="int"/>
		</bean>
		<bean name="BChangedResult">
			<enum name="ChangeTagNormalChanged" value="0"/> 普通增量修改。
			<enum name="ChangeTagRecordIsRemoved" value="1"/> 整个记录删除了。
			<enum name="ChangeTagRecordChanged" value="2"/> 整个记录发生了变更，需要先清除本地数据，再替换进去。

			<variable id="1" name="ItemsReplace" type="map" key="int" value="BItem"/> key is position
			<variable id="2" name="ItemsRemove" type="set" value="int"/> key is position
			<variable id="3" name="ChangeTag" type="int"/>
		</bean>
		<bean name="BUse">
			<variable id="1" name="Position" type="int"/>
		</bean>

		<protocol name="CMove" argument="BMove" handle="server"/>
		<protocol name="CDestroy" argument="BDestroy" handle="server"/>
		<protocol name="CSort" handle="server"/>
		<protocol name="SChanged" argument="BChangedResult" handle="client"/> 所有的包裹改变都通过这个协议发送。
		<protocol name="CGetBag" handle="server"/>
		<protocol name="CUse" argument="BUse" handle="server"/> 没有结果，bag变更自动发送，使用效果在具体的物品使用时设置和发送结果（如果需要）

		<bean name="BItem">
			<variable id="1" name="Id" type="int"/>
			<variable id="2" name="Number" type="int"/>
			<variable id="3" name="Extra" type="dynamic" value="Game.Item.BHorseExtra,Game.Item.BFoodExtra">
				<value bean="Game.Equip.BEquipExtra"/> 少量的动态bean可以声明在 Attribute.value 中，更多的可以声明在这里。
			</variable>
		</bean>
		<bean name="BBag">
			<variable id="1" name="Money" type="long"/>
			<variable id="2" name="Capacity" type="int"/>
			<variable id="3" name="Items" type="map" key="int" value="BItem"/> key is bag position
		</bean>
		<table name="tbag" key="long" value="BBag"/>
	</module>

	<module name="Item" id="3">
		<bean name="BFoodExtra">
			<variable id="1" name="Ammount" type="int"/>
		</bean>
		<bean name="BHorseExtra">
			<variable id="1" name="Speed" type="int"/>
		</bean>

		<!-- 不需要定义自己的 table，一般物品都存储在 Bag 中。 -->
	</module>

	<module name="Fight" id="4">
		<bean name="BFighter"> 战斗相关属性，用于技能等。
			<variable id="1" name="Attack" type="float"/>
			<variable id="2" name="Defence" type="float"/>
		</bean>
		<beankey name="BFighterId">
			<enum name="TypeRole" value="1"/>
			<enum name="TypeMonster" value="2"/>
			<enum name="TypePet" value="2"/>
			...

			<variable id="1" name="Type" type="int"/> 战斗对象类型
			<variable id="2" name="InstanceId" type="long"/> 战斗对象实例id，根据type含义不一样。
		</beankey>
		<table name="tfighters" key="BFighterId" value="BFighter" memory="true"/> key is fighter id. 战斗属性是计算值，每次登录或改变时重新计算。

	</module>

	<module name="Skill" id="5">
		<bean name="BSkill">
			<variable id="1" name="Id" type="int"/>
			<variable id="2" name="Extra" type="dynamic">
				<value bean="BSkillAttackExtra"/>
			</variable>
		</bean>
		<bean name="BSkills">
			<variable id="1" name="Skills" type="map" key="int" value="BSkill"/>
		</bean>
		<bean name="BSkillAttackExtra">
		</bean>

		<table name="tskills" key="long" value="BSkills"/>
	</module>

	<module name="Buf" id="6">
		<!-- buf 应该尽量通过配置控制：冲突，覆盖，增加属性，生命期等 -->
		<bean name="BBuf">
			<variable id="1" name="Id" type="int"/>
			<variable id="2" name="AttachTime" type="long"/> 加入时间
			<variable id="3" name="ContinueTime" type="long"/> 持续时间
			<variable id="4" name="Extra" type="dynamic"> 保存具体buf的不同属性
				<value bean="BBufExtra"/>
			</variable>
		</bean>
		<bean name="BBufs">
			<variable id="1" name="Bufs" type="map" key="int" value="BBuf"/>
		</bean>
		<table name="tbufs" key="long" value="BBufs"/>

		<bean name="BBufExtra">
			<!-- 随便定义一个bean，不知道填什么扩展属性 -->
		</bean>

		<bean name="BBufChanged">
			<enum name="ChangeTagNormalChanged" value="0"/> 普通增量修改。
			<enum name="ChangeTagRecordIsRemoved" value="1"/> 整个记录删除了。
			<enum name="ChangeTagRecordChanged" value="2"/> 整个记录发生了变更，需要先清除本地数据，再替换进去。

			<variable id="1" name="Replace" type="map" key="int" value="BBuf"/> key is bufId
			<variable id="2" name="Remove" type="set" value="int"/> key is bufId
			<variable id="3" name="ChangeTag" type="int"/>
		</bean>
		<protocol name="SChanged" argument="BBufChanged" handle="client"/> 所有的buf改变都通过这个协议发送，通过ChangeListener订阅。
	</module>

	<module name="Equip" id="7">
		<bean name="BEquipement"> 穿上装备
			<variable id="1" name="BagPos" type="int"/>
		</bean>
		<bean name="BUnequipement"> 取下装备
			<variable id="1" name="EquipPos" type="int"/>
		</bean>

		<protocol name="CEquipement" argument="BEquipement" handle="server"/>
		<protocol name="CUnequipement" argument="BUnequipement" handle="server"/>
		<protocol name="SEquipement" argument="Game.Bag.BChangedResult" handle="client"/>

		<bean name="BEquipExtra">
			<variable id="1" name="Attack" type="int"/>
			<variable id="2" name="Defence" type="int"/>
		</bean>

		<bean name="BEquips">
			<variable id="1" name="Items" type="map" key="int" value="Game.Bag.BItem"/> key is equip position
		</bean>
		<table name="tequip" key="long" value="BEquips"/>
	</module>

	<module name="Map" id="8">
		<bean name="BEnterWorldNow">
			<variable id="1" name="MapInstanceId" type="int"/>
			<!-- role postion -->
			<variable id="2" name="x" type="float"/>
			<variable id="3" name="y" type="float"/>
			<variable id="4" name="z" type="float"/>
			<!-- parameter for client resource -->
			<variable id="5" name="ResouceId" type="int"/>
		</bean>
		<bean name="BEnterWorldDone">
			<variable id="1" name="MapInstanceId" type="int"/>
		</bean>

		<protocol name="CEnterWorld" handle="server"/> no argument. all in server
		<protocol name="SEnterWorldNow" argument="BEnterWorldNow" handle="client"/>
		<protocol name="CEnterWorldDone" argument="BEnterWorldDone" handle="server"/> client load resource done
	</module>

	<!--
	name 项目名字
	gendir 代码生成输出目录，默认是当前目录
	GenTables 选择生成哪些表格（Table），如果为空，那就生成那些没有配置gen属性的table，可以用','分开指定多个名字
	-->
	<project name="server" gendir="." platform="cs" GenTables="">
		<!--
		这里引用的模块不该定义协议，定义了也不会被生成，一般为纯逻辑或者数据库模块。
		<module ref="CommonModule"/>
		-->
		<!-- service 生成到 solution 名字空间下 -->
		<service name="Server" handle="server" base="Zeze.Services.HandshakeServer">
			<module ref="Login"/>
			<module ref="Bag"/>
			<module ref="Item"/>
			<module ref="Fight"/>
			<module ref="Skill"/>
			<module ref="Buf"/>
			<module ref="Equip"/>
			<module ref="Map"/>
		</service>
	</project>

	<project name="client" gendir="." platform="cs" GenTables="client">
		<service name="Client" handle="client" base="Zeze.Services.HandshakeClient">
		</service>
	</project>

</solution>
